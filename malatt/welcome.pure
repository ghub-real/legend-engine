// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Press F9 to execute the 'go' function...
// Press F10 to run the full test suite
###Pure
import meta::relational::metamodel::execute::*;
import meta::pure::graphFetch::execution::*;
import meta::relational::runtime::*;



function poc::tests::createTableAndFillDb(connection : meta::relational::runtime::DatabaseConnection[1]) : Boolean[1]
{
   executeInDb('Drop table if exists PersonTable;', $connection);
   executeInDb('Create Table PersonTable(id INT, firstName VARCHAR(200), lastName VARCHAR(200), age INT, addressId INT, firmId INT, managerId INT);', $connection);
   executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (1, \'Peter\', \'Smith\',23, 1,1,2);', $connection);
   executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (2, \'John\', \'Johnson\',22, 2,1,4);', $connection);
   executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (3, \'John\', \'Hill\',12, 3,1,2);', $connection);
   executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (4, \'Anthony\', \'Allen\',22, 4,1,null);', $connection);
   executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (5, \'Fabrice\', \'Roberts\',34, 5,2,null);', $connection);
   executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (6, \'Oliver\', \'Hill\',32, 6,3,null);', $connection);
   executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (7, \'David\', \'Harris\',35, 7,4,null);', $connection);
   true;
}


function go():Any[*]
{
    println('ok',3);
    let myDb = meta::external::store::document::tests::simple::TestDbStore;

    let myRunTime = meta::external::store::document::tests::simple::testRuntime($myDb);
    let connection = $myRunTime.connectionByElement($myDb)->cast(@TestDatabaseConnection);
    poc::tests::createTableAndFillDb($connection);

    let tree = #{
      meta::external::store::document::tests::simple::Person {
         firstName,
         lastName
      }
    }#;

    let query = {|meta::external::store::document::tests::simple::Person.all()->graphFetch($tree)->serialize($tree)};

    let testDocumentStoreSetup = meta::external::store::document::tests::object::getTestSetup();
    let documentStoreExtensions = [meta::external::store::document::extension::documentStoreExtensions()];
    let testRuntime = meta::external::store::document::tests::object::TestLocalMongoRuntime();


    let executionContext = ^meta::pure::runtime::ExecutionContext(queryTimeOutInSeconds=5, enableConstraints=false);

    let debugContext = ^meta::pure::tools::DebugContext(
      debug=false,
      space=''
    );
    // let storeDefinition = meta::alloy::metadataServer::pureModelFromStoreStr('meta::external::store::document::tests::object::TestMongoStore', 'vX_X_X');
    // print($storeDefinition);

// document store execution plan
  //  let result = meta::pure::executionPlan::executionPlan($query, $testDocumentStoreSetup.mapping, $testRuntime, $executionContext, $documentStoreExtensions, $debugContext);

// document store execute
 let result = execute($query, $testDocumentStoreSetup.mapping, $testRuntime, $documentStoreExtensions).values;

    let mapping = meta::external::store::document::tests::simple::simpleRelationalMapping;

// relational execute

println('test');
 //let result = execute($query, $mapping, $myRunTime, meta::relational::extension::relationalExtensions()).values;

    println($result);

}

/*

  let config = ^meta::json::Config(
    fullyQualifiedTypePath=true,
    fullyRespectGraphFetchTree=false,
    includeEnumType=false,
    includeType=false,
    removePropertiesWithEmptySets=true,
    removePropertiesWithNullValues=true,
    typeString='__TYPE'
  );

  meta::json::toJSON($executionPlan, 1000, $config);
  */

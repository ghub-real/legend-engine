{
  "serializer": {
    "name": "pure",
    "version": "vX_X_X"
  },
  "templateFunctions": [
    "<#function renderCollection collection separator prefix suffix defaultValue><#if collection?size == 0><#return defaultValue><\/#if><#return prefix + collection?join(suffix + separator + prefix) + suffix><\/#function>",
    "<#function collectionSize collection> <#return collection?size?c> <\/#function>"
  ],
  "rootExecutionNode": {
    "pure": {
      "function": "serialize",
      "fControl": "serialize_T_MANY__RootGraphFetchTree_1__String_1_",
      "parameters": [
        {
          "multiplicity": {
            "lowerBound": 0
          },
          "_type": "collection"
        },
        {
          "class": "meta::external::store::document::tests::simple::Person",
          "_type": "rootGraphFetchTree",
          "subTrees": [
            {
              "property": "firstName",
              "_type": "propertyGraphFetchTree",
              "_type": "propertyGraphFetchTree"
            },
            {
              "property": "lastName",
              "_type": "propertyGraphFetchTree",
              "_type": "propertyGraphFetchTree"
            }
          ],
          "_type": "rootGraphFetchTree"
        }
      ],
      "_type": "func"
    },
    "_type": "pureExp",
    "resultType": {
      "dataType": "String",
      "_type": "dataType"
    },
    "executionNodes": [
      {
        "graphFetchTree": {
          "class": "meta::external::store::document::tests::simple::Person",
          "_type": "rootGraphFetchTree",
          "subTrees": [
            {
              "property": "firstName",
              "_type": "propertyGraphFetchTree",
              "_type": "propertyGraphFetchTree"
            },
            {
              "property": "lastName",
              "_type": "propertyGraphFetchTree",
              "_type": "propertyGraphFetchTree"
            }
          ],
          "_type": "rootGraphFetchTree"
        },
        "store": "meta::external::store::document::tests::object::TestMongoStore",
        "localGraphFetchExecutionNode": {
          "nodeIndex": 0,
          "graphFetchTree": {
            "class": "meta::external::store::document::tests::simple::Person",
            "_type": "rootGraphFetchTree",
            "subTrees": [
              {
                "property": "firstName",
                "_type": "propertyGraphFetchTree",
                "_type": "propertyGraphFetchTree"
              },
              {
                "property": "lastName",
                "_type": "propertyGraphFetchTree",
                "_type": "propertyGraphFetchTree"
              }
            ],
            "_type": "rootGraphFetchTree"
          },
          "_type": "documentRootQueryTempTableGraphFetch",
          "resultType": {
            "propertiesWithParameters": [
              {
                "property": "firstName"
              },
              {
                "property": "lastName"
              }
            ],
            "class": "meta::external::store::document::tests::simple::Person",
            "setImplementations": [
              {
                "class": "meta::external::store::document::tests::simple::Person",
                "mapping": "meta::external::store::document::tests::object::MyDocStoreMapping",
                "id": "firm_set",
                "propertyMappings": [
                  {
                    "property": "firstName",
                    "type": "String"
                  },
                  {
                    "property": "lastName",
                    "type": "String"
                  },
                  {
                    "property": "otherNames",
                    "type": "String"
                  }
                ]
              }
            ],
            "_type": "partialClass"
          },
          "executionNodes": [
            {
              "mongoQLQuery": "{\"aggregate\":\"persons\", \"pipeline\":[{ \"$match\":{} }, { \"$project\": { \"firstName\": 1 ,\"lastName\": 1 } }], \"cursor\": { } }",
              "mongoQLQuery2": "[{\"label\":\"firstName\"},{\"label\":\"lastName\"}]",
              "resultFields": [
                {
                  "label": "firstName"
                },
                {
                  "label": "lastName"
                }
              ],
              "connection": {
                "datasourceSpecification": {
                  "host": "localhost",
                  "databaseName": "myCollection",
                  "port": 27017,
                  "_type": "mongoDB"
                },
                "authenticationStrategy": {
                  "_type": "test"
                },
                "type": "Mongo",
                "timeZone": "GMT",
                "_type": "DocumentStoreConnection",
                "element": "meta::external::store::document::tests::object::TestMongoStore"
              },
              "_type": "documentQuery",
              "resultType": {
                "dataType": "meta::pure::metamodel::type::Any",
                "_type": "dataType"
              }
            }
          ],
          "implementation": {
            "executionClassFullName": "_pure.plan.root.n1.localGraph.Execute",
            "_type": "java"
          }
        },
        "enableConstraints": true,
        "checked": false,
        "_type": "globalGraphFetchExecutionNode",
        "resultType": {
          "propertiesWithParameters": [
            {
              "property": "firstName"
            },
            {
              "property": "lastName"
            }
          ],
          "class": "meta::external::store::document::tests::simple::Person",
          "setImplementations": [
            {
              "class": "meta::external::store::document::tests::simple::Person",
              "mapping": "meta::external::store::document::tests::object::MyDocStoreMapping",
              "id": "firm_set",
              "propertyMappings": [
                {
                  "property": "firstName",
                  "type": "String"
                },
                {
                  "property": "lastName",
                  "type": "String"
                },
                {
                  "property": "otherNames",
                  "type": "String"
                }
              ]
            }
          ],
          "_type": "partialClass"
        },
        "resultSizeRange": {
          "lowerBound": 0
        }
      }
    ],
    "implementation": {
      "executionClassFullName": "_pure.plan.root.Serialize",
      "_type": "java"
    }
  },
  "globalImplementationSupport": {
    "classes": [
      {
        "package": "_pure.app.meta.external.store.document.tests.simple",
        "name": "EntityWithAddress",
        "source": "package _pure.app.meta.external.store.document.tests.simple;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface EntityWithAddress extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\n{\n    String getAlloyStoreObjectReference$();\n}"
      },
      {
        "package": "_pure.app.meta.external.store.document.tests.simple",
        "name": "Person",
        "source": "package _pure.app.meta.external.store.document.tests.simple;\n\nimport java.math.*;\nimport java.util.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\n\npublic interface Person extends EntityWithAddress, org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject\n{\n    String getFirstName();\n    String getLastName();\n    String getAlloyStoreObjectReference$();\n}"
      },
      {
        "package": "_pure.plan.root",
        "name": "Serialize",
        "source": "package _pure.plan.root;\n\nimport org.finos.legend.engine.plan.dependencies.store.platform.IGraphSerializer;\nimport org.finos.legend.engine.plan.dependencies.store.platform.IPlatformPureExpressionExecutionNodeSerializeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.store.platform.ISerializationWriter;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\n\npublic class Serialize implements IPlatformPureExpressionExecutionNodeSerializeSpecifics\n{\n    public IGraphSerializer<?> serializer(ISerializationWriter writer,\n                                          IExecutionNodeContext context)\n    {\n        return new Serializer(writer, context);\n    }\n}"
      },
      {
        "package": "_pure.plan.root",
        "name": "Serializer",
        "source": "package _pure.plan.root;\n\nimport _pure.app.meta.external.store.document.tests.simple.Person;\nimport org.finos.legend.engine.plan.dependencies.store.platform.IGraphSerializer;\nimport org.finos.legend.engine.plan.dependencies.store.platform.ISerializationWriter;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\n\npublic class Serializer implements IGraphSerializer<Person>\n{\n    private ISerializationWriter writer;\n    private IExecutionNodeContext context;\n\n    Serializer(ISerializationWriter writer, IExecutionNodeContext context)\n    {\n        this.writer = writer;\n        this.context = context;\n    }\n\n    public void serialize(Person value)\n    {\n        if (value instanceof IReferencedObject)\n        {\n            this.writer\n                .startObject(\"meta::external::store::document::tests::simple::Person\",\n                             ((IReferencedObject) value).getAlloyStoreObjectReference$());\n        }\n        else\n        {\n            this.writer.startObject(\"meta::external::store::document::tests::simple::Person\");\n        }\n        this.writer.writeStringProperty(\"firstName\", value.getFirstName());\n        this.writer.writeStringProperty(\"lastName\", value.getLastName());\n        this.writer.endObject();\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph",
        "name": "Execute",
        "source":
 "package _pure.plan.root.n1.localGraph;\n\nimport java.lang.reflect.Method;\nimport java.sql.ResultSet;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.eclipse.collections.api.tuple.Pair;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.document.graphFetch.INonRelationalRootQueryTempTableGraphFetchExecutionNodeSpecifics;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject;\nimport org.bson.Document;\nimport java.util.List;\nimport java.util.Iterator;\nimport org.finos.legend.engine.plan.dependencies.store.document.graphFetch.IDocumentQueryResultField;\n\npublic class Execute implements INonRelationalRootQueryTempTableGraphFetchExecutionNodeSpecifics\n{\n    private Specifics specifics;\n\n    public Execute()\n    {\n        this.specifics = new Specifics();\n    }\n\n\n    public IGraphInstance<? extends IReferencedObject> nextGraphInstance()\n    {\n        return this.specifics.nextGraphInstance();\n    }\n\n    public List<Method> primaryKeyGetters()\n    {\n        return this.specifics.primaryKeyGetters();\n    }\n\n    @Override\n    public void prepare(List<? extends IDocumentQueryResultField> documentQueryResultFields, Iterator<Document> results, String databaseTimeZone, String databaseConnection)\n    {\n        this.specifics.prepare(documentQueryResultFields, results, databaseTimeZone, databaseConnection);\n    }\n\n    public List<Pair<String, String>> allInstanceSetImplementations()\n    {\n        return this.specifics.allInstanceSetImplementations();\n    }\n\n    public List<String> primaryKeyColumns(int setIndex)\n    {\n        return this.specifics.primaryKeyColumns(setIndex);\n    }\n\n    public boolean supportsCaching()\n    {\n        return true;\n    }\n\n    @Override\n    public Object deepCopy(Object object)\n    {\n        return INonRelationalRootQueryTempTableGraphFetchExecutionNodeSpecifics.super.deepCopy(object);\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph",
        "name": "GraphFetch_Node0_Person_Impl",
        "source" :
        "package _pure.plan.root.n1.localGraph;\n\nimport java.math.*;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DayOfWeek;\nimport org.finos.legend.engine.plan.dependencies.domain.date.DurationUnit;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.util.Library;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.databind.JsonSerializer;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializerProvider;\nimport com.fasterxml.jackson.databind.module.SimpleModule;\nimport java.io.IOException;\n\npublic class GraphFetch_Node0_Person_Impl implements _pure.app.meta.external.store.document.tests.simple.Person, org.finos.legend.engine.plan.dependencies.domain.dataQuality.Constrained<_pure.app.meta.external.store.document.tests.simple.Person>, java.io.Serializable\n{\n    private String firstName;\n    private String lastName;\n    private static final ObjectMapper objectMapper$ = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_NULL).registerModule(new SimpleModule().addSerializer(PureDate.class, new JsonSerializer<PureDate>() { @Override public void serialize(PureDate value, JsonGenerator gen, SerializerProvider serializers) throws IOException { gen.writeRawValue(\"\\\"\" + value.toString() + \"\\\"\"); } }));\n    private Object pk$_0;\n    private String setId$;\n    public static String databaseConnection$;\n    private String alloyStoreObjectReference$;\n    private static final long serialVersionUID = 624778034L;\n\n    public String getFirstName()\n    {\n        return this.firstName;\n    }\n\n    public void setFirstName(String firstName)\n    {\n        this.firstName = firstName;\n    }\n\n    public void addFirstName(String object)\n    {\n        if ((Object) this.firstName != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'firstName' of multiplicity with bound 1\");\n        }\n        this.firstName = object;\n    }\n\n    public String getLastName()\n    {\n        return this.lastName;\n    }\n\n    public void setLastName(String lastName)\n    {\n        this.lastName = lastName;\n    }\n\n    public void addLastName(String object)\n    {\n        if ((Object) this.lastName != null)\n        {\n            throw new IllegalStateException(\"Found multiple objects for property 'lastName' of multiplicity with bound 1\");\n        }\n        this.lastName = object;\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints()\n    {\n        return this.allConstraints(new org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext());\n    }\n\n    public _pure.app.meta.external.store.document.tests.simple.Person withConstraintsApplied()\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = allConstraints();\n        if (!defects.isEmpty())\n        {\n            throw new IllegalStateException(defects.stream().map(org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect::getMessage).collect(java.util.stream.Collectors.joining(\"\\n\")));\n        }\n        return this;\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.document.tests.simple.Person> toChecked()\n    {\n        return this.toChecked(null, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.document.tests.simple.Person> toChecked(boolean applyConstraints)\n    {\n        return this.toChecked(null, applyConstraints);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.document.tests.simple.Person> toChecked(Object source)\n    {\n        return this.toChecked(source, true);\n    }\n\n    public org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.document.tests.simple.Person> toChecked(Object source,\n                                                                                                                                                       boolean applyConstraints)\n    {\n        java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> defects = applyConstraints ? allConstraints() : java.util.Collections.emptyList();\n        return new org.finos.legend.engine.plan.dependencies.domain.dataQuality.IChecked<_pure.app.meta.external.store.document.tests.simple.Person>() {\n            public java.util.List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> getDefects() { return defects; }\n            public Object getSource() { return source; }\n            public _pure.app.meta.external.store.document.tests.simple.Person getValue() { return GraphFetch_Node0_Person_Impl.this; }\n        };\n    }\n\n    public List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> allConstraints(org.finos.legend.engine.plan.dependencies.domain.dataQuality.GraphContext context)\n    {\n        List<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect> result = new ArrayList<org.finos.legend.engine.plan.dependencies.domain.dataQuality.IDefect>();\n        if (!context.visited.contains(this))\n        {\n            context.visited.add(this);\n        }\n        return result;\n    }\n\n    public Object getPk$_0()\n    {\n        return this.pk$_0;\n    }\n\n    public void setPk$_0(Object pk$_0)\n    {\n        this.pk$_0 = pk$_0;\n    }\n\n    public String getSetId$()\n    {\n        return this.setId$;\n    }\n\n    public void setSetId$(String setId)\n    {\n        this.setId$ = setId;\n    }\n\n    public String getAlloyStoreObjectReference$()\n    {\n        if (this.alloyStoreObjectReference$ == null)\n        {\n            return \"someuniquestr12345\";\n//            try\n//            {\n//                StringBuilder referenceBuilder = new StringBuilder();\n//                referenceBuilder.append(\"001:\");\n//                referenceBuilder.append(\"010:\");\n//\n//                referenceBuilder.append(\"0000000010:\");\n//                referenceBuilder.append(\"Relational:\");\n//\n//                referenceBuilder.append(\"0000000065:\");\n//                referenceBuilder.append(\"meta::external::store::document::tests::object::MyDocStoreMapping:\");\n//\n//                referenceBuilder.append(\"0000000008:\");\n//                referenceBuilder.append(\"firm_set:\");\n//\n//                String setId = this.getSetId$();\n//                referenceBuilder.append(String.format(\"%010d\", setId.length()));\n//                referenceBuilder.append(\":\");\n//                referenceBuilder.append(setId);\n//                referenceBuilder.append(\":\");\n//\n//                String databaseConnectionString = _pure.plan.root.n1.localGraph.GraphFetch_Node0_Person_Impl.databaseConnection$;\n//                referenceBuilder.append(databaseConnectionString.length());\n//                referenceBuilder.append(\":\");\n//                referenceBuilder.append(databaseConnectionString);\n//                referenceBuilder.append(\":\");\n//\n//                Map<String, Object> pkMap = new HashMap<>();\n//\n//                String pkMapString = objectMapper$.writeValueAsString(pkMap);\n//                referenceBuilder.append(pkMapString.length());\n//                referenceBuilder.append(\":\");\n//                referenceBuilder.append(pkMapString);\n//\n//                this.alloyStoreObjectReference$ = \"ASOR:\" + org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(referenceBuilder.toString().getBytes());\n//            }\n//            catch (Exception e)\n//            {\n//               throw new RuntimeException(e);\n//            }\n        }\n\n        return this.alloyStoreObjectReference$;\n    }\n\n    public void setAlloyStoreObjectReference$(String reference)\n    {\n        this.alloyStoreObjectReference$ = reference;\n    }\n\n    private static long getClassSize$()\n    {\n        return 108L;\n    }\n\n    public long getInstanceSize$()\n    {\n        long size = GraphFetch_Node0_Person_Impl.getClassSize$();\n        if (this.firstName != null)\n        {\n            size = size + this.firstName.length();\n        }\n        if (this.lastName != null)\n        {\n            size = size + this.lastName.length();\n        }\n        if (this.setId$ != null)\n        {\n            size = size + this.setId$.length();\n        }\n        if (this.alloyStoreObjectReference$ != null)\n        {\n            size = size + this.alloyStoreObjectReference$.length();\n        }\n        return size;\n    }\n}"
      },
      {
        "package": "_pure.plan.root.n1.localGraph",
        "name": "Specifics",
        "source":
      "package _pure.plan.root.n1.localGraph;\n\nimport java.lang.reflect.Method;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.sql.Types;\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport org.eclipse.collections.api.tuple.Pair;\nimport org.eclipse.collections.impl.tuple.Tuples;\nimport org.finos.legend.engine.plan.dependencies.domain.date.PureDate;\nimport org.finos.legend.engine.plan.dependencies.domain.graphFetch.IGraphInstance;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IConstantResult;\nimport org.finos.legend.engine.plan.dependencies.store.shared.IExecutionNodeContext;\nimport java.util.List;\nimport java.util.Iterator;\nimport org.bson.Document;\nimport org.finos.legend.engine.plan.dependencies.store.document.graphFetch.IDocumentQueryResultField;\nimport org.finos.legend.engine.plan.dependencies.store.document.graphFetch.INonRelationalRootQueryTempTableGraphFetchExecutionNodeSpecifics;\n\npublic class Specifics implements INonRelationalRootQueryTempTableGraphFetchExecutionNodeSpecifics\n{\n    private static final List<Integer> STRING_TYPES = Arrays.asList(Types.CHAR, Types.VARCHAR, Types.LONGVARCHAR, Types.NCHAR, Types.NVARCHAR, Types.LONGNVARCHAR, Types.OTHER, Types.NULL);\n    private static final List<Integer> INT_TYPES = Arrays.asList(Types.TINYINT, Types.SMALLINT, Types.INTEGER, Types.BIGINT, Types.NULL);\n    private static final List<Integer> FLOAT_TYPES = Arrays.asList(Types.REAL, Types.FLOAT, Types.DOUBLE, Types.DECIMAL, Types.NUMERIC, Types.NULL);\n    private static final List<Integer> BOOL_TYPES = Arrays.asList(Types.BIT, Types.BOOLEAN, Types.NULL);\n    private static final List<Integer> STRICT_DATE_TYPES = Arrays.asList(Types.DATE, Types.NULL);\n    private static final List<Integer> DATE_TIME_TYPES = Arrays.asList(Types.TIMESTAMP, Types.NULL);\n    private ResultSet resultSet;\n\n    List<? extends IDocumentQueryResultField> resultFields;\n    private Iterator<Document> resultDocuments;\n    private String databaseTimeZone;\n    private String databaseConnection;\n    private List<Integer> columnTypes;\n    private List<List<Integer>> propertyIndices;\n    private List<List<Supplier<Object>>> propertyGetters;\n    private Calendar calendar;\n    private Method parentPropertyAdder;\n    private Method parentEdgePointPropertyAdder;\n\n    private Object getAlloyNativeValueFromResultSet(ResultSet resultSet,\n                                                    int columnIndex,\n                                                    int columnType)\n    {\n        try\n        {\n            Object result = null;\n            switch (columnType)\n            {\n                case Types.DATE:\n                {\n                    java.sql.Date date = resultSet.getDate(columnIndex);\n                    if (date != null)\n                    {\n                        result = PureDate.fromSQLDate(date);\n                    }\n                    break;\n                }\n                case Types.TIMESTAMP:\n                {\n                    java.sql.Timestamp timestamp = resultSet.getTimestamp(columnIndex, this.calendar);\n                    if (timestamp != null)\n                    {\n                        result = PureDate.fromSQLTimestamp(timestamp);\n                    }\n                    break;\n                }\n                case Types.TINYINT:\n                case Types.SMALLINT:\n                case Types.INTEGER:\n                case Types.BIGINT:\n                {\n                    long num = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        result = Long.valueOf(num);\n                    }\n                    break;\n                }\n                case Types.REAL:\n                case Types.FLOAT:\n                case Types.DOUBLE:\n                {\n                    double num = resultSet.getDouble(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        result = Double.valueOf(num);\n                    }\n                    break;\n                }\n                case Types.DECIMAL:\n                case Types.NUMERIC:\n                {\n                    result = resultSet.getBigDecimal(columnIndex);\n                    break;\n                }\n                case Types.CHAR:\n                case Types.VARCHAR:\n                case Types.LONGVARCHAR:\n                case Types.NCHAR:\n                case Types.NVARCHAR:\n                case Types.LONGNVARCHAR:\n                case Types.OTHER:\n                {\n                    result = resultSet.getString(columnIndex);\n                    break;\n                }\n                case Types.BIT:\n                case Types.BOOLEAN:\n                {\n                    boolean bool = resultSet.getBoolean(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        result = Boolean.valueOf(bool);\n                    }\n                }\n                case Types.BINARY:\n                case Types.VARBINARY:\n                case Types.LONGVARBINARY:\n                {\n                    byte[] bytes = resultSet.getBytes(columnIndex);\n                    if (bytes != null)\n                    {\n                        result = this.encodeHex(bytes);\n                    }\n                    break;\n                }\n                case Types.NULL:\n                {\n                    // do nothing: value is already assigned to null\n                    break;\n                }\n                default:\n                {\n                    result = resultSet.getObject(columnIndex);\n                }\n            }\n            return result;}\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private String encodeHex(byte[] data)\n    {\n        final char[] DIGITS_LOWER = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\n        final int l = data.length;\n        final char[] out = new char[l << 1];\n        for (int i = 0, j = 0; i < l; i++)\n        {\n            out[j++] = DIGITS_LOWER[(0xF0 & data[i]) >>> 4];\n            out[j++] = DIGITS_LOWER[0x0F & data[i]];\n        }\n        return new String(out);\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForStringProperty(ResultSet resultSet,\n                                                                         int columnIndex,\n                                                                         int columnType,\n                                                                         String propertyName)\n    {\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    return resultSet.getString(columnIndex);\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        else\n        {\n            throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type String from SQL column of type '\" + columnType + \"'.\");\n        }\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForIntegerProperty(ResultSet resultSet,\n                                                                          int columnIndex,\n                                                                          int columnType,\n                                                                          String propertyName)\n    {\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Long res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Long.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Integer from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForFloatProperty(ResultSet resultSet,\n                                                                        int columnIndex,\n                                                                        int columnType,\n                                                                        String propertyName)\n    {\n        if (FLOAT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Double res = null;\n                    double r = resultSet.getDouble(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Double.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Double res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Double.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Float from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForDecimalProperty(ResultSet resultSet,\n                                                                          int columnIndex,\n                                                                          int columnType,\n                                                                          String propertyName)\n    {\n        if (FLOAT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    java.math.BigDecimal res = null;\n                    double r = resultSet.getDouble(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = java.math.BigDecimal.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    java.math.BigDecimal res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = java.math.BigDecimal.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Decimal from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForBooleanProperty(ResultSet resultSet,\n                                                                          int columnIndex,\n                                                                          int columnType,\n                                                                          String propertyName)\n    {\n        if (BOOL_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Boolean res = null;\n                    boolean r = resultSet.getBoolean(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Boolean.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Boolean res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Boolean.valueOf(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (INT_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    Boolean res = null;\n                    long r = resultSet.getLong(columnIndex);\n                    if (!resultSet.wasNull())\n                    {\n                        res = Boolean.valueOf(r == 1);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Boolean from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForStrictDateProperty(ResultSet resultSet,\n                                                                             int columnIndex,\n                                                                             int columnType,\n                                                                             String propertyName)\n    {\n        if (STRICT_DATE_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Date r = resultSet.getDate(columnIndex);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLDate(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (r != null)\n                    {\n                        try\n                        {\n                            res = PureDate.parsePureDate(r);\n                        }\n                        catch (IllegalArgumentException dateTimeParseException)\n                        {\n                            res = PureDate.fromSQLDate(java.sql.Date.valueOf(r));\n                        }\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type StrictDate from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForDateTimeProperty(ResultSet resultSet,\n                                                                           int columnIndex,\n                                                                           int columnType,\n                                                                           String propertyName)\n    {\n        if (DATE_TIME_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Timestamp r = resultSet.getTimestamp(columnIndex, this.calendar);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLTimestamp(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (r != null)\n                    {\n                        try\n                        {\n                            res = PureDate.parsePureDate(r);\n                        }\n                        catch (IllegalArgumentException dateTimeParseException)\n                        {\n                            res = PureDate.fromSQLTimestamp(java.sql.Timestamp.valueOf(r));\n                        }\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type DateTime from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    private Supplier<Object> getResultSetPropertyGetterForDateProperty(ResultSet resultSet,\n                                                                       int columnIndex,\n                                                                       int columnType,\n                                                                       String propertyName)\n    {\n        if (STRICT_DATE_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Date r = resultSet.getDate(columnIndex);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLDate(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (DATE_TIME_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    java.sql.Timestamp r = resultSet.getTimestamp(columnIndex, this.calendar);\n                    if (r != null)\n                    {\n                        res = PureDate.fromSQLTimestamp(r);\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        if (STRING_TYPES.contains(columnType))\n        {\n            return () -> {\n                try\n                {\n                    PureDate res = null;\n                    String r = resultSet.getString(columnIndex);\n                    if (r != null)\n                    {\n                        try\n                        {\n                            res = PureDate.parsePureDate(r);\n                        }\n                        catch (IllegalArgumentException dateTimeParseException1)\n                        {\n                            try\n                            {\n                                res = PureDate.fromSQLTimestamp(java.sql.Timestamp.valueOf(r));\n                            }\n                            catch (java.time.format.DateTimeParseException dateTimeParseException2)\n                            {\n                                res = PureDate.fromSQLDate(java.sql.Date.valueOf(r));\n                            }\n                        }\n                    }\n                    return res;\n                }\n                catch (Exception e)\n                {\n                    throw new RuntimeException(e);\n                }\n            };\n        }\n        throw new RuntimeException(\"Error reading in property '\" + propertyName + \"' of type Date from SQL column of type '\" + columnType + \"'.\");\n    }\n\n    public IGraphInstance<? extends org.finos.legend.engine.plan.dependencies.store.shared.IReferencedObject> nextGraphInstance()\n    {\n\n        try\n        {\n            if (!this.resultDocuments.hasNext()) {\n                return null;\n            }\n\n            Document doc = this.resultDocuments.next();\n            String firstName = doc.getString(\"firstName\");\n            String lastName =  doc.getString(\"lastName\");\n\n            System.out.println(\"iterated doc:\" + doc.toJson());\n\n            final GraphFetch_Node0_Person_Impl object = new GraphFetch_Node0_Person_Impl();\n\n            object.setSetId$(\"firm_id\");\n            object.setFirstName(firstName);\n            object.setLastName(lastName);\n            Object pk$_0 = \"someuniquepk567\";\n            object.setPk$_0(pk$_0);\n\n//            int pkColIndex;\n//            int propertyIndex;\n//            propertyIndex = this.propertyIndices.get(0).get(0);\n//            {\n//                String res = (String) this.propertyGetters.get(0).get(0).get();\n//                if (res == null)\n//                {\n//                    throw new RuntimeException(\"Error reading in property 'firstName'. Property of multiplicity [1] can not be null\");\n//                }\n//                object.setFirstName(res);\n//            }\n//            propertyIndex = this.propertyIndices.get(0).get(1);\n//            {\n//                String res = (String) this.propertyGetters.get(0).get(1).get();\n//                if (res == null)\n//                {\n//                    throw new RuntimeException(\"Error reading in property 'lastName'. Property of multiplicity [1] can not be null\");\n//                }\n//                object.setLastName(res);\n//            }\n            return new IGraphInstance<GraphFetch_Node0_Person_Impl>()\n            {\n                public GraphFetch_Node0_Person_Impl getValue()\n                {\n                    return object;\n                }\n                public long instanceSize()\n                {\n                    return object.getInstanceSize$();\n                }\n            };\n        }\n        catch (RuntimeException e)\n        {\n            throw e;\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n//        try\n//        {\n//            final GraphFetch_Node0_Person_Impl object = new GraphFetch_Node0_Person_Impl();\n//            object.setSetId$(\"meta_external_store_document_tests_simple_Person\");\n//            int pkColIndex;\n//            int propertyIndex;\n//            pkColIndex = this.propertyIndices.get(0).get(2);\n//            Object pk$_0 = this.getAlloyNativeValueFromResultSet(resultSet,\n//                    pkColIndex,\n//                    this.columnTypes.get(pkColIndex - 1));\n//            object.setPk$_0(pk$_0);\n//            propertyIndex = this.propertyIndices.get(0).get(0);\n//            {\n//                String res = (String) this.propertyGetters.get(0).get(0).get();\n//                if (res == null)\n//                {\n//                    throw new RuntimeException(\"Error reading in property 'firstName'. Property of multiplicity [1] can not be null\");\n//                }\n//                object.setFirstName(res);\n//            }\n//            propertyIndex = this.propertyIndices.get(0).get(1);\n//            {\n//                String res = (String) this.propertyGetters.get(0).get(1).get();\n//                if (res == null)\n//                {\n//                    throw new RuntimeException(\"Error reading in property 'lastName'. Property of multiplicity [1] can not be null\");\n//                }\n//                object.setLastName(res);\n//            }\n//            return new IGraphInstance<GraphFetch_Node0_Person_Impl>()\n//            {\n//                public GraphFetch_Node0_Person_Impl getValue()\n//                {\n//                    return object;\n//                }\n//                public long instanceSize()\n//                {\n//                    return object.getInstanceSize$();\n//                }\n//            };\n//        }\n//        catch (RuntimeException e)\n//        {\n//            throw e;\n//        }\n//        catch (Exception e)\n//        {\n//            throw new RuntimeException(e);\n//        }\n    }\n\n    @Override\n    public boolean supportsCaching()\n    {\n        return false;\n    }\n\n    @Override\n    public Object deepCopy(Object object)\n    {\n        return INonRelationalRootQueryTempTableGraphFetchExecutionNodeSpecifics.super.deepCopy(object);\n    }\n\n    public List<Method> primaryKeyGetters()\n    {\n        try\n        {\n            return Arrays.asList(GraphFetch_Node0_Person_Impl.class.getMethod(\"getPk$_0\"));\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public void prepare(List<? extends IDocumentQueryResultField> documentQueryResultFields, Iterator<Document> resultDocuments, String databaseTimeZone, String databaseConnection)\n    {\n        try\n        {\n//            this.resultSet = resultSet;\n            this.databaseTimeZone = databaseTimeZone;\n            this.databaseConnection = databaseConnection;\n            this.calendar = new GregorianCalendar(TimeZone.getTimeZone(this.databaseTimeZone));\n            this.resultFields = documentQueryResultFields;\n            this.resultDocuments = resultDocuments;\n//            ResultSetMetaData resultSetMetaData = this.resultSet.getMetaData();\n//            int columnCount = resultSetMetaData.getColumnCount();\n//            this.columnTypes = new ArrayList<Integer>();\n//            List<String> columnNames = new ArrayList<String>();\n//            for (int i = 1; i <= columnCount; i++)\n//            {\n//                String columnLabel = resultSetMetaData.getColumnLabel(i);\n//                columnNames.add(columnLabel.startsWith(\"\\\"\") && columnLabel\n//                                           .endsWith(\"\\\"\")\n//                                           ? columnLabel.substring(1, columnLabel.length() - 1)\n//                                                        .toUpperCase()\n//                                           : columnLabel.toUpperCase());\n//                this.columnTypes.add(resultSetMetaData.getColumnType(i));\n//            }\n//            this.propertyIndices = new ArrayList<List<Integer>>();\n//            List<Integer> index_0 = new ArrayList<Integer>();\n//            index_0.add(columnNames.indexOf(\"FIRSTNAME\") + 1);\n//            index_0.add(columnNames.indexOf(\"LASTNAME\") + 1);\n//            this.propertyIndices.add(index_0);\n//            GraphFetch_Node0_Person_Impl.databaseConnection$ = databaseConnection;\n//            this.propertyGetters = new ArrayList<List<Supplier<Object>>>();\n//            int propertyIndex;\n//            Supplier<Object> propertyGetter = null;\n//            List<Supplier<Object>> propertyGetter_0 = new ArrayList<Supplier<Object>>();\n//            propertyIndex = this.propertyIndices.get(0).get(0);\n//            propertyGetter = this.getResultSetPropertyGetterForStringProperty(this.resultSet,\n//                                                                              propertyIndex,\n//                                                                              resultSetMetaData.getColumnType(propertyIndex),\n//                                                                              \"firstName\");\n//            propertyGetter_0.add(propertyGetter);\n//            propertyIndex = this.propertyIndices.get(0).get(1);\n//            propertyGetter = this.getResultSetPropertyGetterForStringProperty(this.resultSet,\n//                                                                              propertyIndex,\n//                                                                              resultSetMetaData.getColumnType(propertyIndex),\n//                                                                              \"lastName\");\n//            propertyGetter_0.add(propertyGetter);\n//            this.propertyGetters.add(propertyGetter_0);\n        }\n        catch (RuntimeException e)\n        {\n            throw e;\n        }\n        catch (Exception e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public List<Pair<String, String>> allInstanceSetImplementations()\n    {\n        return Arrays.asList(Tuples.pair(\"meta::external::store::document::tests::simple::simpleRelationalMapping\",\n                \"meta_external_store_document_tests_simple_Person\"));\n    }\n\n    public List<String> primaryKeyColumns(int setIndex)\n    {\n        if (setIndex == 0)\n        {\n            return Arrays.asList(\"pk_0\");\n        }\n        return null;\n    }\n}"
          }
    ],
    "_type": "java"
  }
}
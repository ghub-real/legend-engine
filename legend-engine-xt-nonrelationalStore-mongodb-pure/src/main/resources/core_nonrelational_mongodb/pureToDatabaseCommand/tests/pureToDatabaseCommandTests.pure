import meta::pure::executionPlan::*;
import meta::external::store::mongodb::extension::*;
import meta::pure::runtime::*;
import meta::external::store::mongodb::metamodel::*;
import meta::pure::router::metamodel::clustering::*;
import meta::pure::graphFetch::*;
import meta::external::store::mongodb::contract::*;
import meta::external::store::mongodb::functions::pureToDatabaseCommand::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::*;


function <<test.BeforePackage>> meta::external::store::mongodb::functions::pureToDatabaseCommand::setUp():Boolean[1]
{
  println('setup tests');
  true;
}


function <<test.Test>> meta::external::store::mongodb::functions::pureToDatabaseCommand::testGraphFetchWithGetAll():Any[*]
{

  let query = {|meta::external::store::mongodb::functions::pureToDatabaseCommand::Person.all()};

  let expectedDatabaseCommand = readTestFileToString('graphFetchWithGetAll.json');

  executeQueryAndAssertMongoDatabase($query->evaluateAndDeactivate(), $expectedDatabaseCommand);
}

function <<test.Test>> meta::external::store::mongodb::functions::pureToDatabaseCommand::testGraphFetchWithFilterNotEqual():Any[*]
{

  let query = {|meta::external::store::mongodb::functions::pureToDatabaseCommand::Person.all()->filter(y | $y.fName != 'Theo')};

  let expectedDatabaseCommand = readTestFileToString('graphFetchWithGetAllAndFilterWithNotEqual.json');

  executeQueryAndAssertMongoDatabase($query->evaluateAndDeactivate(), $expectedDatabaseCommand);
}


function <<test.Test>> meta::external::store::mongodb::functions::pureToDatabaseCommand::testGraphFetchWithFilterNotEqualOtherVersion():Any[*]
{

  let query = {|meta::external::store::mongodb::functions::pureToDatabaseCommand::Person.all()->filter(y | !$y.fName == 'Theo')};

  let expectedDatabaseCommand = readTestFileToString('graphFetchWithGetAllAndFilterWithNotEqual.json');

  executeQueryAndAssertMongoDatabase($query->evaluateAndDeactivate(), $expectedDatabaseCommand);
}


function <<test.Test>> meta::external::store::mongodb::functions::pureToDatabaseCommand::testGraphFetchWithGetAllFilterWithSingleFilterContainingMultipleLambdas():Any[*]
{

  let query = {|meta::external::store::mongodb::functions::pureToDatabaseCommand::Person.all()->filter(y | $y.fName == 'Theo' && $y.lName == 'SomeLastName' )}; //->graphFetch(getPersonTree())

  let expectedDatabaseCommand = readTestFileToString('getAllFilterWithSingleFilterContainingMultipleLambdas.json');

  executeQueryAndAssertMongoDatabase($query->evaluateAndDeactivate(), $expectedDatabaseCommand);
}

function <<test.Test>> meta::external::store::mongodb::functions::pureToDatabaseCommand::testGraphFetchWithGetAllWithTwoFiltersWithSingleLambda():Any[*]
{
  let query = {|meta::external::store::mongodb::functions::pureToDatabaseCommand::Person.all()->filter(y | !$y.fName == 'Theo')->filter(y | !$y.lName == 'SomeLastName')};

  let expectedDatabaseCommand = readTestFileToString('getAllWithTwoFiltersWithSingleLambda.json');

  executeQueryAndAssertMongoDatabase($query->evaluateAndDeactivate(), $expectedDatabaseCommand);
}


// IO Helpers


function meta::external::store::mongodb::functions::pureToDatabaseCommand::readFileContentToString(filePath: String[1]):String[1]
{
  readFile($filePath)->toOne();
}

function meta::external::store::mongodb::functions::pureToDatabaseCommand::readTestFileToString(fileName: String[1]):String[1]
{
  readFileContentToString(['/core_nonrelational_mongodb/pureToDatabaseCommand/tests/testData/', $fileName]->joinStrings());
}



// Test helpers


function meta::external::store::mongodb::functions::pureToDatabaseCommand::executeQueryAndAssertMongoDatabase(query: FunctionDefinition<Any>[1], expectedDatabaseCommand: String[1]):Boolean[1]
{
  let resultExecutionPlan =   meta::pure::executionPlan::executionPlan($query, getMongoMapping(), getMongoRuntime(), getMongoExecutionContext(), mongoDbExtensions(), noDebug());
  assertMongoDabase($resultExecutionPlan, $expectedDatabaseCommand);
}

function meta::external::store::mongodb::functions::pureToDatabaseCommand::assertMongoDabase(executionPlan: ExecutionPlan[1], expectedDatabaseCommand: String[1]):Boolean[1]
{
  let actualDatabaseCommand = meta::json::toPrettyJSON($executionPlan.rootExecutionNode->cast(@CurrentExecutionNode).databaseCommand, 10);
  assertEquals($expectedDatabaseCommand, $actualDatabaseCommand);
}


function meta::external::store::mongodb::functions::pureToDatabaseCommand::getMongoExecutionContext():MongoDbExecutionContext[1]
{
 ^meta::external::store::mongodb::functions::pureToDatabaseCommand::MongoDbExecutionContext(queryTimeOutInSeconds=5, enableConstraints=false);
}


function meta::external::store::mongodb::functions::pureToDatabaseCommand::getMongoRuntime():Runtime[1]
{
  ^meta::pure::runtime::Runtime(connections = ^meta::external::store::mongodb::runtime::connections::MongoDatabaseConnection(element=getMongoDatabase(),
   type=meta::external::store::mongodb::runtime::DatabaseType.MongoDb));
}


function meta::external::store::mongodb::functions::pureToDatabaseCommand::getMongoMapping():Mapping[1]
{

    let firstName = ^meta::external::store::mongodb::metamodel::Field(
          path = 'firstName',
          type = ^meta::external::store::mongodb::metamodel::BsonType(),
          nullable = false
    );
    let lastName = ^meta::external::store::mongodb::metamodel::Field(
          path = 'lName',
          type = ^meta::external::store::mongodb::metamodel::BsonType(),
          nullable = false
    );
    let age = ^meta::external::store::mongodb::metamodel::Field(
          path = 'age',
          type = ^meta::external::store::mongodb::metamodel::BsonType(),
          nullable = false
    );

    let domainClass = meta::external::store::mongodb::functions::pureToDatabaseCommand::Person;

    let personPropMappings = [
      ^meta::external::store::mongodb::metamodel::mapping::MongoDbPropertyMapping(
        property = $domainClass.properties->filter(p | $p.name == 'fName')->toOne(),
        sourceSetImplementationId = 'person', targetSetImplementationId = '',
        field = $firstName),
      ^meta::external::store::mongodb::metamodel::mapping::MongoDbPropertyMapping(
        property = $domainClass.properties->filter(p | $p.name == 'lName')->toOne(),
        sourceSetImplementationId = 'person', targetSetImplementationId = '',
        field = $lastName),
        ^meta::external::store::mongodb::metamodel::mapping::MongoDbPropertyMapping(
        property = $domainClass.properties->filter(p | $p.name == 'age')->toOne(),
        sourceSetImplementationId = 'person', targetSetImplementationId = '',
        field = $age)
   ];

   let mongoDatabase = getMongoDatabase();

    let collection = ^meta::external::store::mongodb::metamodel::Collection(
      owner=$mongoDatabase,
      name='person',
      fields= [$firstName, $lastName, $age]
    );

   let mongoDbClassMapping = ^meta::external::store::mongodb::metamodel::mapping::RootMongoDbInstanceSetImplementation(
    class=$domainClass,
    root=true,
    id='person',
    userDefinedPrimaryKey = false,
    parent = meta::external::store::mongodb::functions::pureToDatabaseCommand::MongoDbMapping,
    propertyMappings = $personPropMappings,
    mainCollection = $collection
   );

   ^meta::pure::mapping::Mapping(classMappings=[$mongoDbClassMapping], name='mongoDbClassMapping');
}



function meta::external::store::mongodb::functions::pureToDatabaseCommand::getMongoDatabase():MongoDatabase[1]
{
 ^meta::external::store::mongodb::metamodel::MongoDatabase(
        name     = 'TestMongoDatabase',
        authenticationEnabled = false
    );
}

function meta::external::store::mongodb::functions::pureToDatabaseCommand::getPersonTree():RootGraphFetchTree<Person>[1]
{
    let personTree = #{
      meta::external::store::mongodb::functions::pureToDatabaseCommand::Person {
         fName,
         lName
      }
    }#;
}
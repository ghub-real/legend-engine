// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import meta::external::store::mongodb::functions::pureToDatabaseCommand::*;

###Mapping
Mapping meta::external::store::mongodb::functions::pureToDatabaseCommand::MongoDbMapping
(
)

###Pure
Class meta::external::store::mongodb::functions::pureToDatabaseCommand::EntityWithAddress
{
    address : meta::external::store::mongodb::functions::pureToDatabaseCommand::Address[0..1];
}

// Clone of meta::relational::tests::model::simple::
Class meta::external::store::mongodb::functions::pureToDatabaseCommand::Person extends meta::external::store::mongodb::functions::pureToDatabaseCommand::EntityWithAddress
{
    fName : String[1];
    lName : String[1];
    oNames : String[*];

    extraInformation : String[0..1];
    manager : meta::external::store::mongodb::functions::pureToDatabaseCommand::Person[0..1];
    age : Integer[0..1];
    constant() { 'constant' } : String[1];

    nickName : String[0..1];

    activeEmployment: Boolean[0..1];
}

Class meta::external::store::mongodb::functions::pureToDatabaseCommand::Firm extends meta::external::store::mongodb::functions::pureToDatabaseCommand::EntityWithAddress
{
    <<equality.Key>> legalName : String[1];
    nickName : String[0..1];
    country: String[1];
}


Class meta::external::store::mongodb::functions::pureToDatabaseCommand::GeographicEntity
{
    type : meta::external::store::mongodb::functions::pureToDatabaseCommand::GeographicEntityType[1];
}

Class meta::external::store::mongodb::functions::pureToDatabaseCommand::Location extends meta::external::store::mongodb::functions::pureToDatabaseCommand::GeographicEntity
{
    place : String[1];
    censusdate: Date[0..1];
}

Class meta::external::store::mongodb::functions::pureToDatabaseCommand::Address extends meta::external::store::mongodb::functions::pureToDatabaseCommand::GeographicEntity
{
    name : String[1];
    street : String[0..1];
    comments : String[0..1];
    description(){
      'D:' + $this.name;
    }:String[1];
}

Enum meta::external::store::mongodb::functions::pureToDatabaseCommand::GeographicEntityType
{
    {doc.doc = 'A city, town, village, or other urban area.'} CITY,
    <<doc.deprecated>> COUNTRY,
    {doc.doc = 'Any geographic entity other than a city or country.'} REGION
}

Association meta::external::store::mongodb::functions::pureToDatabaseCommand::Firm_Person
{
    firm : meta::external::store::mongodb::functions::pureToDatabaseCommand::Firm[0..1];
    employees : meta::external::store::mongodb::functions::pureToDatabaseCommand::Person[*];
}



###Mapping
import meta::external::store::mongodb::functions::pureToDatabaseCommand::*;



Mapping meta::external::store::mongodb::functions::pureToDatabaseCommand::simpleRelationalMapping
(
 GeographicEntityType: EnumerationMapping GE
 {
       CITY:  1
 }

   Person : Relational
   {
     ~primaryKey(
     [TestDbStore]default.personTable.ID
       )
       ~mainTable[TestDbStore]personTable
       fName : [TestDbStore]personTable.FIRSTNAME,
       age : [TestDbStore]personTable.AGE,
       lName : [TestDbStore]personTable.LASTNAME,
       firm : [TestDbStore]@Firm_Person,
       address : [TestDbStore]@Address_Person,
       manager : [TestDbStore]@Person_Manager
   }

   Firm : Relational
   {
       legalName : [TestDbStore]firmTable.LEGALNAME,
       employees : [TestDbStore]@Firm_Person,
       address : [TestDbStore]@Address_Firm
   }

   Address : Relational
   {
       name : [TestDbStore]addressTable.NAME,
       street : [TestDbStore]addressTable.STREET,
       //type : EnumerationMapping GE : [TestDbStore]addressTable.TYPE,
       comments : [TestDbStore]addressTable.COMMENTS
   }

)


###Relational
Database meta::external::store::mongodb::functions::pureToDatabaseCommand::TestDbStore
 (
 Table personTable (
   ID INT PRIMARY KEY,
   FIRSTNAME VARCHAR(200),
   LASTNAME VARCHAR(200),
   AGE INT,
   ADDRESSID INT,
   FIRMID INT,
   MANAGERID INT
 )


 Table firmTable(
   ID INT PRIMARY KEY,
   LEGALNAME VARCHAR(200),
   ADDRESSID INT,
   CEOID INT
 )

 Table addressTable(
   ID INT PRIMARY KEY,
   TYPE INT,
   NAME VARCHAR(200),
   STREET VARCHAR(100),
   COMMENTS VARCHAR(100)
 )
 Join Firm_Ceo(firmTable.CEOID = personTable.ID)
 Join Firm_Person(firmTable.ID = personTable.FIRMID)
 Join Address_Firm(addressTable.ID = firmTable.ADDRESSID)
 Join Address_Person(addressTable.ID = personTable.ADDRESSID)
 Join Person_Manager(personTable.MANAGERID = {target}.ID)

)

###Pure
import meta::external::store::mongodb::functions::pureToDatabaseCommand::*;

function meta::external::store::mongodb::functions::pureToDatabaseCommand::testRuntime(db:meta::relational::metamodel::Database[1]):meta::pure::runtime::Runtime[1]
{
 ^meta::pure::runtime::Runtime(connections = meta::external::store::mongodb::functions::pureToDatabaseCommand::testDatabaseConnection($db))
}


function meta::external::store::mongodb::functions::pureToDatabaseCommand::testDatabaseConnection(db:meta::relational::metamodel::Database[1]):meta::relational::runtime::TestDatabaseConnection[1]
{
   ^meta::relational::runtime::TestDatabaseConnection(
       element = $db,
       type = meta::relational::runtime::DatabaseType.H2,
       timeZone = 'GMT'
   );
}
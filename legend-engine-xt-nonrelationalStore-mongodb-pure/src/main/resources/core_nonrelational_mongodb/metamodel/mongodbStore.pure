// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::shared::format::binding::*;
import meta::external::store::mongodb::metamodel::*;
import meta::external::store::mongodb::metamodel::aggregation::*;
import meta::external::store::mongodb::metamodel::authentication::*;

Enum meta::external::store::mongodb::metamodel::aggregation::Operator
{
    EQ, GT, GTE, IN, LT, LTE, NE, NIN, AND, NOT, NOR, OR
}

Class meta::external::store::mongodb::metamodel::BaseType
{
  allOf: BaseType[*];
  anyOf: BaseType[*];
  //bsonType: BaseType[1];
  enum: String[*];
  not: BaseType[0..1];
  oneOf: BaseType[*];
  title: String[0..1];
  description: String[0..1];
}


Class meta::external::store::mongodb::metamodel::PropertyType
{
  key: String[1];
  value: BaseType[1];
}

Class meta::external::store::mongodb::metamodel::ArrayType extends BaseType
{
  additionalItemsAllowed: Boolean[1];
  additionalItems: BaseType[0..1];
  items: BaseType[1..*];
  maxItems: Integer[0..1];
  minItems: Integer[0..1];
  uniqueItems: Boolean[1];
}

Class meta::external::store::mongodb::metamodel::ObjectType extends BaseType
{
  properties: PropertyType[1..*];
  required: String[*];  // Refers to properties, should it be ObjectType[*]??
  additionalPropertiesAllowed: Boolean[1];
  additionalProperties: ObjectType[0..1]; 
  dependencies: ObjectType[0..1];
  maxProperties: Integer[0..1];
  minProperties: Integer[0..1];
  patternProperties: RegExType[0..1];
}


Class meta::external::store::mongodb::metamodel::BsonType extends BaseType
{  
}

Class {doc.doc = 'UTF 8'} meta::external::store::mongodb::metamodel::StringType extends BsonType
{
  pattern: String[0..1];
  minLength: Integer[0..1];
  maxLength: Integer[0..1];
}

Class meta::external::store::mongodb::metamodel::DoubleType extends BsonType
{
  maximum: Number[0..1];
  minimum: Number[0..1];
}

Class meta::external::store::mongodb::metamodel::BinaryType extends BsonType
{
  subType: Integer[1]; // https://www.mongodb.com/docs/manual/reference/bson-types/#binary-data
}

Class meta::external::store::mongodb::metamodel::ObjectIdType extends BsonType
{
}

Class meta::external::store::mongodb::metamodel::BoolType extends BsonType
{
}

Class meta::external::store::mongodb::metamodel::DateType extends BsonType
{
}

Class meta::external::store::mongodb::metamodel::NullType extends BsonType
{
}

Class meta::external::store::mongodb::metamodel::RegExType extends BsonType
{  
}

Class meta::external::store::mongodb::metamodel::JavaScriptType extends BsonType
{  
}

Class meta::external::store::mongodb::metamodel::IntType extends BsonType
{
  maximum: Integer[0..1];
  minimum: Integer[0..1];
}

Class meta::external::store::mongodb::metamodel::TimeStampType extends BsonType
{  
}

Class meta::external::store::mongodb::metamodel::LongType extends BsonType
{
  maximum: Integer[0..1];
  minimum: Integer[0..1];
}

Class meta::external::store::mongodb::metamodel::DecimalType extends BsonType
{
  maximum: Decimal[1];
  minimum: Decimal[1];
}

Class meta::external::store::mongodb::metamodel::MinKeyType extends BsonType
{  
}

Class meta::external::store::mongodb::metamodel::MaxKeyType extends BsonType
{  
}

Enum meta::external::store::mongodb::metamodel::SchemaValidationLevel
{
    strict, moderate
}

Enum meta::external::store::mongodb::metamodel::SchemaValidationAction
{
    error, warn
}

Class meta::external::store::mongodb::metamodel::Schema extends ObjectType
{
    id: String[1];
    schemaVersion: String[0..1];
    validationLevel: SchemaValidationLevel[0..1];
    validationAction: SchemaValidationAction[0..1];
}

Class meta::external::store::mongodb::metamodel::Collection extends NamedMongoDbRelation
{
  owner: MongoDatabase[1];
  name: String[1];
  schema: Schema[0..1];
  field(fieldName:String[1])
  {
    $this.fields->cast(@Field)->filter(c | $c.name == $fieldName)->first();
  }: Field[0..1];
}

Class meta::external::store::mongodb::metamodel::CollectionView
{
  owner: MongoDatabase[1];
  name: String[1];
  collation: Collation[0..1];
  source: Collection[1];
  pipeLine: ViewPipeline[1..*];
} 

Class meta::external::store::mongodb::metamodel::MongoDatabase extends meta::pure::store::set::SetBasedStore
{
  //name: String[1];
  collections: Collection[*];
  views: CollectionView[*];
  authenticationEnabled: Boolean[1];
  authenticationMethod: AuthenticationStrategy[0..1];
}

Class meta::external::store::mongodb::metamodel::Collation
{
  locale: String[1];
}

Class meta::external::store::mongodb::metamodel::aggregation::DatabaseCommand
{
    type: String[0..1];
    collectionName: String[0..1];
    aggregationPipeline: AggregationPipeline[0..1];
}

Class meta::external::store::mongodb::metamodel::aggregation::ViewPipeline extends AggregationPipeline
{
}

Class meta::external::store::mongodb::metamodel::aggregation::AggregationPipeline
{
    stages: Stage[*];
}


Class meta::external::store::mongodb::metamodel::aggregation::Stage
{
}


Class {doc.doc = 'Maps to { $match { $expr { <aggregation expression> } } }'}
meta::external::store::mongodb::metamodel::aggregation::MatchStage extends Stage
{
  expression: ArgumentExpression[1];
}

Class {doc.doc = 'Maps to { $project { $fieldName { <specification> } } }'}
meta::external::store::mongodb::metamodel::aggregation::ProjectStage extends Stage
{
  filters: ArgumentExpression[1];
}

Class meta::external::store::mongodb::metamodel::aggregation::LiteralValue extends ArgumentExpression
{
  value: BaseTypeValue[1];
}

Class meta::external::store::mongodb::metamodel::FieldName extends meta::external::store::mongodb::metamodel::MongoDbElement
{
    <<equality.Key>> name : String[1];
}

Class meta::external::store::mongodb::metamodel::BinaryOperation extends meta::external::store::mongodb::metamodel::Operation
{
    <<equality.Key>> left:MongoDbElement[1];
    <<equality.Key>> right:MongoDbElement[1];
}

Class meta::external::store::mongodb::metamodel::LiteralList extends meta::external::store::mongodb::metamodel::MongoDbElement
{
   <<equality.Key>> values:Literal[*];
}

Class meta::external::store::mongodb::metamodel::aggregation::AggregateExpression
{
  arguments: ArgumentExpression[*];
}

Class meta::external::store::mongodb::metamodel::aggregation::ArgumentExpression
{
}

Class {doc.doc = 'Comparison Operator Expressions https://www.mongodb.com/docs/manual/reference/operator/query-comparison/'}
meta::external::store::mongodb::metamodel::aggregation::ComparisonOperatorExpression extends ArgumentExpression
{
  expression: LiteralValue[1];
}

Class meta::external::store::mongodb::metamodel::aggregation::EqOperatorExpression extends ComparisonOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::GTOperatorExpression extends ComparisonOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::GreaterThanEqualsOperatorExpression extends ComparisonOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::InOperatorExpression extends ComparisonOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::LTOperatorExpression extends ComparisonOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::LTEOperatorExpression extends ComparisonOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::NEOperatorExpression extends ComparisonOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::NinOperatorExpression extends ComparisonOperatorExpression
{
}

Class {doc.doc = 'Logical Operator Expressions https://www.mongodb.com/docs/manual/reference/operator/query-logical/'}
meta::external::store::mongodb::metamodel::aggregation::LogicalOperatorExpression extends ArgumentExpression
{
  expressions: ArgumentExpression[*];
}

Class meta::external::store::mongodb::metamodel::aggregation::AndOperatorExpression extends LogicalOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::OrOperatorExpression extends LogicalOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::NotOperatorExpression extends LogicalOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::NorOperatorExpression extends LogicalOperatorExpression
{
}

Class meta::external::store::mongodb::metamodel::aggregation::KeyValueExpressionPair
{
  field: String[1];
  argument: ArgumentExpression[1];
}

Class {doc.doc = 'Computed field for Project expressions with format $fieldName'}
meta::external::store::mongodb::metamodel::aggregation::ComputedFieldValue extends ArgumentExpression
{
  value: String[1];
}

Class meta::external::store::mongodb::metamodel::aggregation::ObjectExpression extends ArgumentExpression
{
  keyValues: KeyValueExpressionPair[*];
}

Class meta::external::store::mongodb::metamodel::aggregation::BaseTypeValue
{
}

Class meta::external::store::mongodb::metamodel::aggregation::StringTypeValue extends BaseTypeValue
{
  value: String[1];
}

Class meta::external::store::mongodb::metamodel::aggregation::IntTypeValue extends BaseTypeValue
{
  value: Integer[1];
}

Class meta::external::store::mongodb::metamodel::aggregation::BoolTypeValue extends BaseTypeValue
{
  value: Boolean[1];
}

Class meta::external::store::mongodb::metamodel::aggregation::NullTypeValue extends BaseTypeValue
{
}

Class meta::external::store::mongodb::metamodel::aggregation::LongTypeValue extends BaseTypeValue
{
}

Class meta::external::store::mongodb::metamodel::aggregation::DecimalTypeValue extends BaseTypeValue
{
  value: Float[1];
}

Class meta::external::store::mongodb::metamodel::aggregation::ObjectTypeValue extends BaseTypeValue
{
  keyValues: KeyValuePair[*];
}

Class meta::external::store::mongodb::metamodel::aggregation::ArrayTypeValue extends BaseTypeValue
{
  items: BaseTypeValue[*];
}

Class meta::external::store::mongodb::metamodel::aggregation::KeyValuePair
{
  key: String[1];
  value: BaseTypeValue[1];
}


Enum meta::external::store::mongodb::metamodel::authentication::AuthenticationMechanism
{
  SCRAM_SHA_1, SCRAM_SHA_256, GSSAPI, MONGODB_X509
}

Class meta::external::store::mongodb::metamodel::authentication::AuthenticationStrategy
{
  authenticationMechanism: AuthenticationMechanism[1];
  authenticationDatanbase: String[1];
}

Class meta::external::store::mongodb::metamodel::authentication::SCRAM extends AuthenticationStrategy
{
  baseVaultReference: String[0..1];
  userNameVaultReference: String[1];
  passwordVaultReference: String[1];
  // digestPassword: Boolean[0..1];
}

Class meta::external::store::mongodb::metamodel::authentication::Kerberos extends AuthenticationStrategy
{
  serverPrincipal: String[1];
  keyTabVaultReference: String[1];
}


Class meta::external::store::mongodb::metamodel::authentication::X509 extends AuthenticationStrategy
{
  requireTls: Boolean[1];
  certificationKeyFileVaultRef: String[1];
  certificationAuthorityFileVaultRef: String[1];
}

Class <<typemodifiers.abstract>> meta::external::store::mongodb::metamodel::MongoDbElement
{
}

Class meta::external::store::mongodb::metamodel::MongoDbRelation extends MongoDbElement, meta::pure::store::set::SetRelation
{
   fields : MongoDbElement[*];
   primaryKey : Field[*];
}

Class <<typemodifiers.abstract>> meta::external::store::mongodb::metamodel::NamedMongoDbRelation extends MongoDbRelation
{
   name     : String[1];
   id       : String[0..1];
}

Class meta::external::store::mongodb::metamodel::Field extends meta::external::store::mongodb::metamodel::MongoDbElement, meta::pure::store::set::SetColumn
{
    <<equality.Key>> name : String[1];
    <<equality.Key>> type : meta::external::store::mongodb::metamodel::TypeReference[1];
    nullable : Boolean[0..1];
    owner : MongoDbRelation[0..1];
}

Class <<typemodifiers.abstract>> meta::external::store::mongodb::metamodel::TypeReference
{
  list     : Boolean[1];
}

Class meta::external::store::mongodb::metamodel::CoreDataType extends meta::external::store::mongodb::metamodel::TypeReference
{
}

Class meta::external::store::mongodb::metamodel::StringTypeReference extends meta::external::store::mongodb::metamodel::CoreDataType
{
}

Class meta::external::store::mongodb::metamodel::BooleanTypeReference extends meta::external::store::mongodb::metamodel::CoreDataType
{
}

Class meta::external::store::mongodb::metamodel::IntegerTypeReference extends meta::external::store::mongodb::metamodel::CoreDataType
{
}

Class meta::external::store::mongodb::metamodel::LongTypeReference extends meta::external::store::mongodb::metamodel::CoreDataType
{
}

Class meta::external::store::mongodb::metamodel::DateTypeReference extends meta::external::store::mongodb::metamodel::CoreDataType
{
}

Class meta::external::store::mongodb::metamodel::DoubleTypeReference extends meta::external::store::mongodb::metamodel::CoreDataType
{
}

Class meta::external::store::mongodb::metamodel::DecimalTypeReference extends meta::external::store::mongodb::metamodel::CoreDataType
{
}

Class meta::external::store::mongodb::metamodel::ObjectIdTypeReference extends meta::external::store::mongodb::metamodel::CoreDataType
{
}

Class meta::external::store::mongodb::metamodel::ObjectTypeReference extends meta::external::store::mongodb::metamodel::CoreDataType
{
   type    : Class<Any>[1];
   binding : Binding[1];
}

Class meta::external::store::mongodb::metamodel::CollectionAlias extends Alias
{
   setMappingOwner : meta::pure::mapping::PropertyMappingsImplementation[0..1];
   mongoDatabase    : MongoDatabase[0..1];
   mongoDbRelation(){$this.mongoDbElement->cast(@MongoDbRelation)}: MongoDbRelation[1];
}

Class meta::external::store::mongodb::metamodel::Alias extends MongoDbElement
{
   <<equality.Key>> name : String[1];
   <<equality.Key>> mongoDbElement : MongoDbElement[1];
}

//Equivalent of SQLQuery
Class meta::external::store::mongodb::metamodel::DocumentQuery extends meta::external::store::mongodb::metamodel::MongoDbElement
{
}

Class {doc.doc = 'Equivalent of select query'}
meta::external::store::mongodb::metamodel::SelectDocumentQuery extends meta::external::store::mongodb::metamodel::DocumentQuery, meta::external::store::mongodb::metamodel::MongoDbRelation
{
    distinct : Boolean[0..1];
    data : RootJoinDocumentTreeNode[0..1];
    filteringOperation : MongoDbElement[*];
    databaseCommand: DatabaseCommand[0..1];
    //leftSideOfFilter : DocumentTreeNode[0..1];
    //savedFilteringOperation : Pair<DocumentTreeNode, DocumentStoreElement>[*];
    // orderBy
    // groupBy
    // havingOperation
    // leftSideOfFilter
    //
}

Class meta::external::store::mongodb::metamodel::DocumentTreeNode extends meta::pure::functions::collection::TreeNode
{
  alias : CollectionAlias[1];
  children()
  {
    $this.childrenData->cast(@JoinDocumentTreeNode)
  }:JoinDocumentTreeNode[*];
}

Class meta::external::store::mongodb::metamodel::RootJoinDocumentTreeNode extends DocumentTreeNode, MongoDbRelation
{
}

Class meta::external::store::mongodb::metamodel::JoinDocumentTreeNode extends DocumentTreeNode
{
// Not supporting
}

Class meta::external::store::mongodb::metamodel::Function extends MongoDbElement
{
}

Class meta::external::store::mongodb::metamodel::Operation extends meta::external::store::mongodb::metamodel::Function
{
}

Class meta::external::store::mongodb::metamodel::DynaFunction extends Operation
{
    <<equality.Key>> name : String[1];
    <<equality.Key>> parameters : MongoDbElement[*];
}

Class meta::external::store::mongodb::metamodel::DocumentMappingSpecification
{
    userDefinedPrimaryKey : Boolean[1];
    mainCollectionAlias : CollectionAlias[1];

    mainDocumentRelation(){$this.mainCollectionAlias.mongoDbRelation}:MongoDbRelation[1];

    mainCollection(){$this.mainCollectionAlias.mongoDbElement->match([c:Collection[1]|$c])}:Collection[1];
}

Class meta::external::store::mongodb::metamodel::Literal extends meta::external::store::mongodb::metamodel::MongoDbElement
{
   <<equality.Key>> value:Any[1];
}

Class meta::external::store::mongodb::metamodel::DocumentNull
{
   //Used to make sure that any two Document field Null instances are equal
   <<equality.Key>> key:Nil[0];
   toString()
   {
      'DocumentNull'
   }:String[1];
}
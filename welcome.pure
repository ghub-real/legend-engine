// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Press F9 to execute the 'go' function...
// Press F10 to run the full test suite
###Pure
import meta::pure::graphFetch::execution::*;
import meta::relational::runtime::*;
import meta::json::*;


function poc::tests::createTableAndFillDb(connection : meta::relational::runtime::DatabaseConnection[1]) : Boolean[1]
{
   meta::relational::metamodel::execute::executeInDb('Drop table if exists PersonTable;', $connection);
   meta::relational::metamodel::execute::executeInDb('Create Table PersonTable(id INT, firstName VARCHAR(200), lastName VARCHAR(200), age INT, addressId INT, firmId INT, managerId INT);', $connection);
   meta::relational::metamodel::execute::executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (1, \'Peter\', \'Smith\',23, 1,1,2);', $connection);
   meta::relational::metamodel::execute::executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (2, \'John\', \'Johnson\',22, 2,1,4);', $connection);
   meta::relational::metamodel::execute::executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (3, \'John\', \'Hill\',12, 3,1,2);', $connection);
   meta::relational::metamodel::execute::executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (4, \'Anthony\', \'Allen\',22, 4,1,null);', $connection);
   meta::relational::metamodel::execute::executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (5, \'Fabrice\', \'Roberts\',34, 5,2,null);', $connection);
   meta::relational::metamodel::execute::executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (6, \'Oliver\', \'Hill\',32, 6,3,null);', $connection);
   meta::relational::metamodel::execute::executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (7, \'David\', \'Harris\',35, 7,4,null);', $connection);
   meta::relational::metamodel::execute::executeInDb('insert into PersonTable (id, firstName, lastName, age, addressId, firmId, managerId) values (8, \'Daniel\', \'Andersson\',35, 7,4,null);', $connection);
   true;
}

function go():Any[*]
{
  println('ok',3);

  let myDb = meta::pure::mapping::modelToModel::test::setup::TestDbStore;

    let myRunTime = meta::pure::mapping::modelToModel::test::setup::testRuntime($myDb);
    let connection = $myRunTime.connectionByElement($myDb)->cast(@TestDatabaseConnection);
    poc::tests::createTableAndFillDb($connection);

    let personTree = #{
      meta::pure::mapping::modelToModel::test::setup::Person {
         fName,
         lName
      }
    }#;

    let firmTree = #{
      meta::pure::mapping::modelToModel::test::setup::Firm {
         legalName,
         nickName
      }
    }#;


   let personQuery = {|meta::pure::mapping::modelToModel::test::setup::Person.all()->project(x | $x.fName, 'firstName')};
    //  ->graphFetch($personTree)->serialize($personTree)};


    let firmQuery = {|meta::pure::mapping::modelToModel::test::setup::Firm.all()
      ->graphFetch($firmTree)->serialize($firmTree)};


    let mapping = meta::pure::mapping::modelToModel::test::setup::simpleRelationalMapping;

// relational execute
   let result = execute($personQuery, $mapping, $myRunTime, meta::relational::extension::relationalExtensions()).values;

   println($result);

}
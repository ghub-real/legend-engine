// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import meta::external::store::document::functions::documentQueryToString::mongo::*;
import meta::external::store::document::metamodel::runtime::*;
import meta::external::store::document::extension::documentQueryToString::*;
import meta::external::store::document::metamodel::*;
import meta::external::store::document::functions::documentQueryToString::*;
import meta::external::store::document::extension::*; // for profile


function <<db.DocumentStoreExtensionLoader>> meta::external::store::document::functions::documentQueryToString::mongo::dbExtensionLoaderForMongo():DbExtensionLoader[1]
{
  ^DbExtensionLoader(dbType = DatabaseType.Mongo, loader = createDbExtensionForMongo__DbExtension_1_);
}

function <<access.private>> meta::external::store::document::functions::documentQueryToString::mongo::createDbExtensionForMongo():DbExtension[1]
{
   let reservedWords = mongoReservedWords();
   let literalProcessors = getDefaultLiteralProcessors();
   let literalProcessor = {type:Type[1]| $literalProcessors->get(if($type->instanceOf(Enumeration), | Enum, | $type))->toOne()};

   ^DbExtension(
      isBooleanLiteralSupported = true,
      aliasLimit = 1000,
      isDbReservedIdentifier = {str:String[1]| $str->in($reservedWords)},
      literalProcessor = $literalProcessor,
      selectDocumentQueryProcessor = processSelectDocumentQueryMongo_SelectDocumentQuery_1__SqlGenerationContext_1__Boolean_1__String_1_,
      identifierProcessor = processIdentifierWithDoubleQuotesMongo_String_1__DbConfig_1__String_1_,
      dynaFuncDispatch = processDynaFunctionMongo_DynaFunction_1__Boolean_1__String_1_
   );
}

function <<access.private>> meta::external::store::document::functions::documentQueryToString::mongo::mongoReservedWords():String[*]
{
   [
      'collection','int32'
   ];
}

function meta::external::store::document::functions::documentQueryToString::mongo::processSelectDocumentQueryMongo(selectDocumentQuery:SelectDocumentQuery[1], sgc:SqlGenerationContext[1], isSubSelect:Boolean[1]):String[1]
{
  '{"aggregate":"' + $selectDocumentQuery.data.alias.name->toOne() + '", "pipeline":' + processPipelines($selectDocumentQuery) + ' }';
}

// not used
function meta::external::store::document::functions::documentQueryToString::mongo::processIdentifierWithDoubleQuotesMongo(identifier:String[1], dbConfig: DbConfig[1]):String[1]
{
  let quoteChar = '"';
  let a = if($dbConfig.quoteIdentifiers || $identifier->startsWith('"') || $dbConfig.isDbReservedIdentifier($identifier),
    | '%s%s%s'->format([$quoteChar, $identifier->replace('"', ''), $quoteChar]),
    | $identifier
  );
  $a;
}

function meta::external::store::document::functions::documentQueryToString::mongo::processDynaFunctionMongo(d: DynaFunction[1], isNegation: Boolean[1]): String[1]
{
  let name = $d.name;
  let parameters = $d.parameters;


  if ($name == 'equal' || $name == 'not',
    | if($name == 'not',
      | let negationString = processDynaFunctionMongo($parameters->at(0)->cast(@DynaFunction), true);,
      | let key = $parameters->at(0)->cast(@Field).name;
        let value = $parameters->at(1)->cast(@Literal).value;
        let operationSymbol = if ($isNegation, | '$ne', | getOperationSymbol($name));
        '{ "' + $key + '": { "' + $operationSymbol + '": "' + $value->cast(@String) + '" } }';
      )
    ,
    | if ($name == 'and' || $name == 'or',
      | let andOrNot = $parameters->fold({item, acc | $acc->concatenate(processDynaFunctionMongo($item->cast(@DynaFunction), false))}, []);
        let operationSymbol = getOperationSymbol($name);
        '{ "' + $operationSymbol + '": [' + $andOrNot->joinStrings(', ') + '] }';
      ,
      | processDynaFunctionMongo($parameters->at(0)->cast(@DynaFunction), false); // this "else" here assumes that the name of the dynaFunction is "group". Is there something else to consider?
      )
    );
}

function <<access.private>> meta::external::store::document::functions::documentQueryToString::mongo::getOperationSymbol(op:String[1]): String[1]
{
  // add all operations, greater than, lower than, etc
  if ($op == 'and',
    | '$and',
    | if ($op == 'or',
      | '$or',
      | if ($op == 'not',
        | '$ne',
        | if ($op == 'equal',
          | '$eq',
          | 'wrong operation'
          )
        )
      )
    )
}

function <<access.private>> meta::external::store::document::functions::documentQueryToString::mongo::processPipelines(selectDocumentQuery:SelectDocumentQuery[1]): String[1]
{
  '[' + processMatch($selectDocumentQuery) + ', ' + processProject($selectDocumentQuery) + ']'
}

function <<access.private>> meta::external::store::document::functions::documentQueryToString::mongo::processMatch(selectDocumentQuery:SelectDocumentQuery[1]): String[1]
{
  if(!$selectDocumentQuery.filteringOperation->isEmpty(),| '{' + '"$match":' + processDynaFunctionMongo($selectDocumentQuery.filteringOperation->cast(@DynaFunction)->toOne(), false) + ' }' , | '"$match":{}');
}

function <<access.private>> meta::external::store::document::functions::documentQueryToString::mongo::processProject(selectDocumentQuery:SelectDocumentQuery[1]): String[1]
{
  '{ "$project": { ' + $selectDocumentQuery.fields->cast(@Field)->map(f | '"' + $f.name + '": 1 ')->joinStrings(',') + '} }'
}
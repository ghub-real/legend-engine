// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::store::*;
import meta::pure::mapping::*;
import meta::pure::runtime::*;
import meta::pure::extension::*;
import meta::pure::executionPlan::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::graphFetch::executionPlan::*;
import meta::external::store::document::metamodel::mapping::*;
import meta::external::store::document::contract::*;
import meta::external::store::document::functions::pureToDocumentStoreQuery::*;
import meta::external::store::document::metamodel::*;
import meta::external::store::document::mapping::*;

function meta::external::store::document::contract::documentStoreStoreContract():StoreContract[1]
{
   ^StoreContract
   (
     id = 'documentStore',
     supports = meta::external::store::document::contract::supports_FunctionExpression_1__Boolean_1_,
     planExecution = meta::external::store::document::contract::planExecution_StoreQuery_1__RoutedValueSpecification_$0_1$__Mapping_$0_1$__Runtime_$0_1$__ExecutionContext_1__Extension_MANY__DebugContext_1__ExecutionNode_1_,
     planGraphFetchExecution = meta::external::store::document::contract::planGraphFetchExecution_ClusteredGraphFetchTree_1__String_MANY__Boolean_1__Boolean_1__StoreQuery_1__RoutedValueSpecification_$0_1$__Mapping_1__Runtime_1__ExecutionContext_1__Extension_MANY__DebugContext_1__LocalGraphFetchExecutionNode_1_,
//     planCrossGraphFetchExecution = meta::external::store::service::contract::planCrossGraphFetchExecution_ClusteredGraphFetchTree_1__String_MANY__String_1__Boolean_1__Boolean_1__Map_1__Mapping_1__Runtime_1__ExecutionContext_1__Extension_MANY__DebugContext_1__LocalGraphFetchExecutionNode_1_,
//
    supportsSetImplementation = s:SetImplementation[1]|$s->instanceOf(DocumentInstanceSetImplementation),
    supportsStore = s:Store[1]|$s->instanceOf(meta::external::store::document::metamodel::DocumentStore),
    resolveStoreFromSetImplementation = s:InstanceSetImplementation[1]|$s->meta::external::store::document::contract::getStore(),

    supportsNativeJoinAmongElements = false,
//
//     printConnectionToString = {extensions:meta::pure::extension::Extension[*]|
//                                       [
//                                           s:ServiceStoreConnection[1]| meta::external::store::service::executionPlan::toString::serviceStoreConnectionToString($s);
//                                       ]},
//     printPlanNodeToString = {space : String[1], extensions:meta::pure::extension::Extension[*]|
//                                       [
//                                          s:RestServiceExecutionNode[1] | meta::external::store::service::executionPlan::toString::serviceStoreExecutionNodeToString($s, $space, $extensions);,
//                                          sp:ServiceParametersResolutionExecutionNode[1] | meta::external::store::service::executionPlan::toString::serviceParametersResolutionExecutionNodeToString($sp, $space, $extensions);,
//                                          l:LimitExecutionNode[1] | meta::external::store::service::executionPlan::toString::limitExecutionNodeToString($l, $space, $extensions);
//                                       ]},
   extractSourceClassFromSetImplementation =
           [
             s: RootDocumentInstanceSetImplementation[1]  | $s.class,
             e: EmbeddedDocumentInstanceSetImplementation[1] | $e.class
           ],
   executeStoreQuery = meta::external::store::document::contract::execution_StoreQuery_1__RoutedValueSpecification_$0_1$__Mapping_1__Runtime_1__ExecutionContext_1__Extension_MANY__DebugContext_1__Result_1_


//    crossStoreSourceSupportsBatching = {
//        set:InstanceSetImplementation[1], xProperties:AbstractProperty<Any>[*], params : Map<String, String>[1] |
//          if ($set->instanceOf(RootServiceInstanceSetImplementation),
//            | $xProperties->meta::external::store::service::executionPlan::generation::querySupportsBatching($params, $set->cast(@RootServiceInstanceSetImplementation)),
//            | false
//          )
//    }
   )
}
//
// Execution 

// Execution flow

function meta::external::store::document::contract::execution(sq:meta::pure::mapping::StoreQuery[1], ext:RoutedValueSpecification[0..1], m:Mapping[1], runtime:Runtime[1], exeCtx:ExecutionContext[1], extensions:Extension[*], debug:DebugContext[1]):Result<Any|*>[1]
{
   execution($sq.store->cast(@DocumentStore), $sq.fe, $ext, $m, $runtime, $sq.inScopeVars, $exeCtx, $extensions, $debug);
}

function meta::external::store::document::contract::planExecution(sq:StoreQuery[1], ext:RoutedValueSpecification[0..1], mapping:Mapping[0..1], runtime:Runtime[0..1], exeCtx:ExecutionContext[1], extensions:Extension[*], debug:DebugContext[1]):ExecutionNode[1]
{
  let fe = $sq.fe->evaluateAndDeactivate()->cast(@FunctionExpression);
  assert($fe.func->in([meta::pure::graphFetch::execution::graphFetchFunctions()]), 'Document Store supports graphFetch queries only');
  $sq->meta::pure::graphFetch::executionPlan::planGraphFetchExecution($ext, $mapping->toOne(), $runtime->toOne(), $exeCtx, $extensions, $debug);
}

function meta::external::store::document::contract::planGraphFetchExecution(tree:ClusteredGraphFetchTree[1], orderedPaths:String[*], enableConstraints:Boolean[1], checked:Boolean[1], sq:meta::pure::mapping::StoreQuery[1], ext:RoutedValueSpecification[0..1], m:Mapping[1], runtime:Runtime[1], exeCtx:ExecutionContext[1], extensions:Extension[*], debug:DebugContext[1]):LocalGraphFetchExecutionNode[1]
{
  meta::external::store::document::graphFetch::executionPlan::planRootGraphFetchExecutionDocumentStore($sq, $ext, $tree, $orderedPaths, $m, $runtime, $exeCtx, $enableConstraints, $checked, $extensions, $debug)
}

//function meta::external::store::document::contract::planCrossGraphFetchExecution(tree:ClusteredGraphFetchTree[1], orderedPaths:String[*], newParentPath:String[1], enableConstraints:Boolean[1], checked:Boolean[1], inScopeVars: Map<String, List<Any>>[1], m:Mapping[1], runtime:Runtime[1], exeCtx:ExecutionContext[1], extensions:Extension[*], debug:DebugContext[1]):LocalGraphFetchExecutionNode[1]
//{
//  meta::relational::graphFetch::executionPlan::planCrossRootGraphFetchExecutionRelational($tree, $orderedPaths, $newParentPath, $inScopeVars, $m, $runtime, $exeCtx, $extensions, $debug);
//}


function meta::external::store::document::contract::supports(f:FunctionExpression[1]):Boolean[1]
{
  !findSupportedFunction($f, getSupportedFunctions())->isEmpty()
}


function meta::external::store::document::contract::getStore(r:InstanceSetImplementation[1]):Store[1]
{
  $r->match(
    [
      r:RootDocumentInstanceSetImplementation[1]| $r.mainCollectionAlias.documentStore->toOne()//,
//      e:EmbeddedRelationalInstanceSetImplementation[1]| $e->resolveRootFromEmbedded()->meta::relational::contract::getStore(),    ]
     ])
}
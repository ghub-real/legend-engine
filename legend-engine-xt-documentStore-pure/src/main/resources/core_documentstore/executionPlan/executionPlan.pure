// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::executionPlan::*;
import meta::external::store::document::graphFetch::executionPlan::*;
import meta::external::store::document::metamodel::mapping::*;
import meta::external::store::document::metamodel::runtime::*;
import meta::document::store::mapping::*;


Class meta::external::store::document::graphFetch::executionPlan::DocumentRelationResultType extends ResultType
{
   {doc.doc = 'Collection Name' }
   documentRelationName : String[1];
   documentRelationType : DocumentRelationType[1];
   {doc.doc = 'Database name'}
   documentStore : String[1];
   fields : meta::external::store::document::metamodel::Field[*];
}

Enum meta::external::store::document::graphFetch::executionPlan::DocumentRelationType
{
   COLLECTION,
   COLLECTION_VIEW
}

Class meta::external::store::document::metamodel::mapping::DocumentQueryResultField
{
   label : String[1];
   dataType : meta::external::store::document::metamodel::TypeReference[0..1];
}

Class meta::external::store::document::metamodel::mapping::DocumentQueryExecutionNode extends ExecutionNode
{
   documentQuery : String[1];
   onConnectionCloseCommitQuery : String[0..1];
   onConnectionCloseRollbackQuery : String[0..1];
   resultFields : DocumentQueryResultField[*];
   connection: DatabaseConnection[1];
}

// TODO: do we need dataType?
Class meta::document::store::mapping::DocumentResultColumn
{
   label : String[1];
   //dataType : meta::relational::metamodel::datatype::DataType[0..1];
}
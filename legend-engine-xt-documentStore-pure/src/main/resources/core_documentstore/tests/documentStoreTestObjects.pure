// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//import meta::external::store::document::tests::object::*;

###Mapping
Mapping meta::external::store::document::tests::object::MyDocStoreMapping
(
)

###Pure
import meta::external::store::document::metamodel::mapping::*;
import meta::external::store::document::metamodel::*;
import meta::pure::functions::collection::*;
function <<access.private>> meta::external::store::document::tests::object::TestMongoStore(): meta::external::store::document::metamodel::DocumentStore[1]
{
  let mongoStore = ^meta::external::store::document::metamodel::DocumentStore(
        package  = meta::external::store::document::tests::object,
        name     = 'TestMongoStore'
    );
   let allPersonFields = meta::external::store::document::tests::object::getAllPersonFields();
   let allFirmFields = meta::external::store::document::tests::object::getAllFirmFields();

   let docCollection = [
           ^meta::external::store::document::metamodel::Collection(
             id='101',
             name='person',
             fields = $allPersonFields
           ),
           ^meta::external::store::document::metamodel::Collection(
             id='102',
             name='firm',
             fields = $allFirmFields
           )
   ];

  $mongoStore->mutateAdd('collections', $docCollection);
  $mongoStore;
}


function <<access.private>> meta::external::store::document::tests::object::getAllPersonFields(): meta::external::store::document::metamodel::Field[*]
{
    //let mongoStore = meta::external::store::document::tests::object::getMongoStore();

    let field1 = ^meta::external::store::document::metamodel::Field(
          name = 'fName',
          type = ^meta::external::store::document::metamodel::StringTypeReference(list=false),
          nullable = false
    );
    let field2 = ^meta::external::store::document::metamodel::Field(
          name = 'lName',
          type = ^meta::external::store::document::metamodel::StringTypeReference(list=false),
          nullable = false
    );
    let field3 = ^meta::external::store::document::metamodel::Field(
          name = 'oNames',
          type = ^meta::external::store::document::metamodel::StringTypeReference(list=true),
          nullable = false
    );

    [$field1, $field2, $field3];
}

function <<access.private>> meta::external::store::document::tests::object::getAllFirmFields(): meta::external::store::document::metamodel::Field[*]
{
    //let mongoStore = meta::external::store::document::tests::object::getMongoStore();

    let field1 = ^meta::external::store::document::metamodel::Field(
          name = 'legalName',
          type = ^meta::external::store::document::metamodel::StringTypeReference(list=false),
          nullable = false
    );
    let field2 = ^meta::external::store::document::metamodel::Field(
          name = 'nickName',
          type = ^meta::external::store::document::metamodel::StringTypeReference(list=false),
          nullable = false
    );

    [$field1, $field2];
}


function <<access.private>> meta::external::store::document::tests::object::TestMongoMapping(): meta::pure::mapping::Mapping[1]
{
    let personDomainClass = meta::external::store::document::tests::simple::Person;
    let firmDomainClass = meta::external::store::document::tests::simple::Firm;
    //let mongoStore = meta::external::store::document::tests::object::getMongoStore();
    let mongoStore = meta::external::store::document::tests::object::TestMongoStore();
    let allPersonFields = meta::external::store::document::tests::object::getAllPersonFields();
    let allFirmFields = meta::external::store::document::tests::object::getAllFirmFields();


  let  personPropMappings = [
      ^meta::external::store::document::metamodel::mapping::DocumentPropertyMapping(
        property = $personDomainClass.properties->filter(p | $p.name == 'fName')->toOne(),
        sourceSetImplementationId = 'person_set', targetSetImplementationId = '',
        documentStoreElement = $allPersonFields->at(0)),
      ^meta::external::store::document::metamodel::mapping::DocumentPropertyMapping(
        property = $personDomainClass.properties->filter(p | $p.name == 'lName')->toOne(),
        sourceSetImplementationId = 'person_set', targetSetImplementationId = '',
        documentStoreElement = $allPersonFields->at(1)),
      ^meta::external::store::document::metamodel::mapping::DocumentPropertyMapping(
        property = $personDomainClass.properties->filter(p | $p.name == 'oNames')->toOne(),
        sourceSetImplementationId = 'person_set', targetSetImplementationId = '',
        documentStoreElement = $allPersonFields->at(2))
   ];

     let  firmPropMappings = [
         ^meta::external::store::document::metamodel::mapping::DocumentPropertyMapping(
           property = $firmDomainClass.properties->filter(p | $p.name == 'legalName')->toOne(),
           sourceSetImplementationId = 'firm_set', targetSetImplementationId = '',
           documentStoreElement = $allFirmFields->at(0)),
         ^meta::external::store::document::metamodel::mapping::DocumentPropertyMapping(
           property = $firmDomainClass.properties->filter(p | $p.name == 'nickName')->toOne(),
           sourceSetImplementationId = 'firm_set', targetSetImplementationId = '',
           documentStoreElement = $allFirmFields->at(1))
      ];


   let personCollectionAlias = ^meta::external::store::document::metamodel::CollectionAlias(
                name = 'person',
                documentElement = $mongoStore.collections->filter(p | $p.name == 'person')->toOne(),
                documentStore=$mongoStore
                );

   let firmCollectionAlias = ^meta::external::store::document::metamodel::CollectionAlias(
                name = 'firm',
                documentElement = $mongoStore.collections->filter(p | $p.name == 'firm')->toOne(),
                documentStore=$mongoStore
                );

   let personDocumentSetImpl = ^meta::external::store::document::metamodel::mapping::RootDocumentInstanceSetImplementation(
                id = 'person_set',
                root = true,
                class = $personDomainClass,
                parent =  meta::external::store::document::tests::object::MyDocStoreMapping,
                userDefinedPrimaryKey = false,
                mainCollectionAlias = $personCollectionAlias,
                propertyMappings = $personPropMappings);


   let firmDocumentSetImpl = ^meta::external::store::document::metamodel::mapping::RootDocumentInstanceSetImplementation(
                  id = 'firm_set',
                  root = true,
                  class = $firmDomainClass,
                  parent =  meta::external::store::document::tests::object::MyDocStoreMapping,
                  userDefinedPrimaryKey = false,
                  mainCollectionAlias = $firmCollectionAlias,
                  propertyMappings = $firmPropMappings);

  $personCollectionAlias->mutateAdd('setMappingOwner', $personDocumentSetImpl);
  $firmCollectionAlias->mutateAdd('setMappingOwner', $firmDocumentSetImpl);

  ^meta::pure::mapping::Mapping(classMappings=[$personDocumentSetImpl, $firmDocumentSetImpl], name='mongo_db_mapping');
}
/*
function meta::external::store::document::tests::object::getDocumentStoreAndMapping() : meta::pure::functions::collection::Pair<DocumentStore, RootDocumentInstanceSetImplementation>[1]
{
    let domainClass = meta::external::store::document::tests::simple::Person;
    //let mongoStore = meta::external::store::document::tests::object::getMongoStore();
    let mongoStore = meta::external::store::document::tests::object::TestMongoStore();
    let allPersonFields = meta::external::store::document::tests::object::getAllPersonFields();
    let allFirmFields = meta::external::store::document::tests::object::getAllPersonFields();


  let  personPropMappings = [
      ^meta::external::store::document::metamodel::mapping::DocumentPropertyMapping(
        property = $domainClass.properties->filter(p | $p.name == 'firstName')->toOne(),
        sourceSetImplementationId = 'firm_set', targetSetImplementationId = '',
        documentStoreElement = $allFields->at(0)),
      ^meta::external::store::document::metamodel::mapping::DocumentPropertyMapping(
        property = $domainClass.properties->filter(p | $p.name == 'lastName')->toOne(),
        sourceSetImplementationId = 'firm_set', targetSetImplementationId = '',
        documentStoreElement = $allFields->at(1)),
      ^meta::external::store::document::metamodel::mapping::DocumentPropertyMapping(
        property = $domainClass.properties->filter(p | $p.name == 'otherNames')->toOne(),
        sourceSetImplementationId = 'firm_set', targetSetImplementationId = '',
        documentStoreElement = $allFields->at(2))
   ];


   let collectionAlias = ^meta::external::store::document::metamodel::CollectionAlias(
                name = 'persons',
                documentElement = $mongoStore.docCollection,
                documentStore=$mongoStore
                );

   let firmDocumentSetImpl = ^meta::external::store::document::metamodel::mapping::RootDocumentInstanceSetImplementation(
                id = 'firm_set',
                root = true,
                class = $domainClass,
                parent =  meta::external::store::document::tests::object::MyDocStoreMapping,
                userDefinedPrimaryKey = false,
                mainCollectionAlias = $collectionAlias,
                propertyMappings = $firmPropMappings);

  $collectionAlias->mutateAdd('setMappingOwner', $firmDocumentSetImpl);
  meta::pure::functions::collection::pair($mongoStore, $firmDocumentSetImpl);
}
*/

function meta::external::store::document::tests::object::TestLocalMongoRuntime():meta::pure::runtime::Runtime[1]
{
  meta::external::store::document::tests::object::getLocalMongoRuntime(
    meta::external::store::document::tests::object::TestMongoStore())
}


function <<access.private>> meta::external::store::document::tests::object::getLocalMongoRuntime(dataStore:meta::external::store::document::metamodel::DocumentStore[1]):meta::pure::runtime::Runtime[1]
{
  ^meta::pure::runtime::Runtime(connections = meta::external::store::document::tests::object::localMongoDatabaseConnection($dataStore));
}


function <<access.private>> meta::external::store::document::tests::object::localMongoDatabaseConnection(dataStore:meta::external::store::document::metamodel::DocumentStore[1]):meta::external::store::document::runtime::connections::DocumentStoreConnection[1]
{
    ^meta::external::store::document::runtime::connections::DocumentStoreConnection(
        element = $dataStore,
        type = meta::external::store::document::metamodel::runtime::DatabaseType.Mongo,
        datasourceSpecification = ^meta::external::store::document::runtime::connections::MongoDBDatasourceSpecification(host='localhost',port=27017,databaseName='myCollection'),
        authenticationStrategy = ^meta::external::store::document::runtime::authentication::TestDatabaseAuthenticationStrategy(),
        timeZone = 'GMT'
    );
}

Class meta::external::store::document::tests::object::TestSetup 
{
   mapping: meta::pure::mapping::Mapping[1];
   runtime: meta::pure::runtime::Runtime[1];
}

function meta::external::store::document::tests::object::getTestSetup(): meta::external::store::document::tests::object::TestSetup[1]
{
  let mapping = meta::external::store::document::tests::object::TestMongoMapping();
  let runtime = meta::external::store::document::tests::object::getLocalMongoRuntime(meta::external::store::document::tests::object::TestMongoStore());
  ^meta::external::store::document::tests::object::TestSetup(mapping = $mapping, runtime = $runtime);
}
/*
function meta::external::store::document::tests::object::getCollection(): meta::external::store::document::metamodel::Collection[1]
{
  // let mongoStore = meta::external::store::document::tests::object::getMongoStore();

  let allFields = meta::external::store::document::tests::object::getAllFields();

    let docCollection = 
        ^meta::external::store::document::metamodel::Collection(
          id='101',
          name='persons',
          fields = $allFields
        );

    $docCollection;
}

function meta::external::store::document::tests::object::getCollectionWithLessFieldsThanMapping(): meta::external::store::document::metamodel::Collection[1]
{
  // let mongoStore = meta::external::store::document::tests::object::getMongoStore();

  let allFields = meta::external::store::document::tests::object::getAllFields();

    let docCollection = 
        ^meta::external::store::document::metamodel::Collection(
          id='101',
          name='persons',
          fields = [$allFields->at(0), $allFields->at(1)]
        );

    $docCollection;
}
*/

/*
function meta::external::store::document::tests::object::getState(): meta::external::store::document::metamodel::State[1]
{
  let domainClass = meta::external::store::document::tests::simple::Person;
  let graphFetchProperty1 = $domainClass.properties->filter(p | $p.name == 'firstName')->toOne();
  let graphFetchProperty2 = $domainClass.properties->filter(p | $p.name == 'lastName')->toOne();
  let graphFetchProperty3 = $domainClass.properties->filter(p | $p.name == 'otherNames')->toOne();

  ^State(
    graphFetchFlow=true,
    graphFetchProperties=[$graphFetchProperty1, $graphFetchProperty2, $graphFetchProperty3]
  );
}
*/
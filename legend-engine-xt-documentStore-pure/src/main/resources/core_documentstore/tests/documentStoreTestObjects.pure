// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//import meta::external::store::document::tests::object::*;

###Mapping
Mapping meta::external::store::document::tests::object::MyDocStoreMapping
(
)

###Pure
import meta::external::store::document::metamodel::mapping::*;
import meta::external::store::document::metamodel::*;
import meta::pure::functions::collection::*;



function meta::external::store::document::tests::object::TestFirmMongoStore(): meta::external::store::document::metamodel::DocumentStore[1]
{
  let mongoStore = ^meta::external::store::document::metamodel::DocumentStore(
        package  = meta::external::store::document::tests::object,
        name     = 'TestMongoStore'
    );
   let allFields = meta::external::store::document::tests::object::getAllFirmFields();

   let docCollection = [
           ^meta::external::store::document::metamodel::Collection(
             id='101',
             name='firms',
             fields = $allFields
           )
   ];

  $mongoStore->mutateAdd('collections', $docCollection);
  $mongoStore;
}

function meta::external::store::document::tests::object::TestPersonMongoStore(): meta::external::store::document::metamodel::DocumentStore[1]
{
  let mongoStore = ^meta::external::store::document::metamodel::DocumentStore(
        package  = meta::external::store::document::tests::object,
        name     = 'TestMongoStore'
    );
   let allFields = meta::external::store::document::tests::object::getAllPersonFields();

   let docCollection = [
           ^meta::external::store::document::metamodel::Collection(
             id='101',
             name='persons',
             fields = $allFields
           )
   ];

  $mongoStore->mutateAdd('collections', $docCollection);
  $mongoStore;
}

function meta::external::store::document::tests::object::getAllPersonFields(): meta::external::store::document::metamodel::Field[*]
{

    let field1 = ^meta::external::store::document::metamodel::Field(
          name = 'firstName',
          type = ^meta::external::store::document::metamodel::StringTypeReference(list=false),
          nullable = false
    );
    let field2 = ^meta::external::store::document::metamodel::Field(
          name = 'lastName',
          type = ^meta::external::store::document::metamodel::StringTypeReference(list=false),
          nullable = false
    );
    let field3 = ^meta::external::store::document::metamodel::Field(
          name = 'oNames',
          type = ^meta::external::store::document::metamodel::StringTypeReference(list=true),
          nullable = false
    );

    [$field1, $field2, $field3];
}

function meta::external::store::document::tests::object::getAllFirmFields(): meta::external::store::document::metamodel::Field[*]
{

    let field1 = ^meta::external::store::document::metamodel::Field(
          name = 'name',
          type = ^meta::external::store::document::metamodel::StringTypeReference(list=false),
          nullable = false
    );
    let field2 = ^meta::external::store::document::metamodel::Field(
          name = 'address',
          type = ^meta::external::store::document::metamodel::StringTypeReference(list=false),
          nullable = false
    );
    let field3 = ^meta::external::store::document::metamodel::Field(
          name = 'country',
          type = ^meta::external::store::document::metamodel::StringTypeReference(list=true),
          nullable = false
    );

    [$field1, $field2, $field3];
}


function meta::external::store::document::tests::object::getFirmDocumentStoreAndMapping() : meta::pure::functions::collection::Pair<DocumentStore, RootDocumentInstanceSetImplementation>[1]
{
    let domainClass = meta::external::store::document::tests::simple::Firm;
    //let mongoStore = meta::external::store::document::tests::object::getMongoStore();
    let mongoStore = meta::external::store::document::tests::object::TestFirmMongoStore();
    let allFields = meta::external::store::document::tests::object::getAllFirmFields();

    let docCollection = [
        ^meta::external::store::document::metamodel::Collection(
          id='101',
          name='firms',
          fields = $allFields,
          primaryKey = $allFields->at(0)
        )
      ];

    $mongoStore->mutateAdd('collections', $docCollection);

  let  firmPropMappings = [
      ^meta::external::store::document::metamodel::mapping::DocumentPropertyMapping(
        property = $domainClass.properties->filter(p | $p.name == 'name')->toOne(),
        sourceSetImplementationId = 'firm_set', targetSetImplementationId = '',
        documentStoreElement = $allFields->at(0)),
      ^meta::external::store::document::metamodel::mapping::DocumentPropertyMapping(
        property = $domainClass.properties->filter(p | $p.name == 'country')->toOne(),
        sourceSetImplementationId = 'firm_set', targetSetImplementationId = '',
        documentStoreElement = $allFields->at(2))
   ];


   let collectionAlias = ^meta::external::store::document::metamodel::CollectionAlias(
                name = 'firms',
                documentElement = $docCollection,
                documentStore=$mongoStore
                );

   let firmDocumentSetImpl = ^meta::external::store::document::metamodel::mapping::RootDocumentInstanceSetImplementation(
                id = 'firm_set',
                root = true,
                class = $domainClass,
                parent =  meta::external::store::document::tests::object::MyDocStoreMapping,
                userDefinedPrimaryKey = false,
                mainCollectionAlias = $collectionAlias,
                propertyMappings = $firmPropMappings);

  $collectionAlias->mutateAdd('setMappingOwner', $firmDocumentSetImpl);
  meta::pure::functions::collection::pair($mongoStore, $firmDocumentSetImpl);
}

function meta::external::store::document::tests::object::getPersonDocumentStoreAndMapping() : meta::pure::functions::collection::Pair<DocumentStore, RootDocumentInstanceSetImplementation>[1]
{
    let domainClass = meta::external::store::document::tests::simple::Person;
    //let mongoStore = meta::external::store::document::tests::object::getMongoStore();
    let mongoStore = meta::external::store::document::tests::object::TestPersonMongoStore();
    let allFields = meta::external::store::document::tests::object::getAllPersonFields();

    let docCollection = [
        ^meta::external::store::document::metamodel::Collection(
          id='101',
          name='persons',
          fields = $allFields,
          primaryKey = $allFields->at(0)
        )
      ];

    $mongoStore->mutateAdd('collections', $docCollection);

  let  firmPropMappings = [
      ^meta::external::store::document::metamodel::mapping::DocumentPropertyMapping(
        property = $domainClass.properties->filter(p | $p.name == 'firstName')->toOne(),
        sourceSetImplementationId = 'firm_set', targetSetImplementationId = '',
        documentStoreElement = $allFields->at(0)),
      ^meta::external::store::document::metamodel::mapping::DocumentPropertyMapping(
        property = $domainClass.properties->filter(p | $p.name == 'lastName')->toOne(),
        sourceSetImplementationId = 'firm_set', targetSetImplementationId = '',
        documentStoreElement = $allFields->at(1)),
      ^meta::external::store::document::metamodel::mapping::DocumentPropertyMapping(
        property = $domainClass.properties->filter(p | $p.name == 'otherNames')->toOne(),
        sourceSetImplementationId = 'firm_set', targetSetImplementationId = '',
        documentStoreElement = $allFields->at(2))
   ];


   let collectionAlias = ^meta::external::store::document::metamodel::CollectionAlias(
                name = 'persons',
                documentElement = $docCollection,
                documentStore=$mongoStore
                );

   let firmDocumentSetImpl = ^meta::external::store::document::metamodel::mapping::RootDocumentInstanceSetImplementation(
                id = 'firm_set',
                root = true,
                class = $domainClass,
                parent =  meta::external::store::document::tests::object::MyDocStoreMapping,
                userDefinedPrimaryKey = false,
                mainCollectionAlias = $collectionAlias,
                propertyMappings = $firmPropMappings);

  $collectionAlias->mutateAdd('setMappingOwner', $firmDocumentSetImpl);
  meta::pure::functions::collection::pair($mongoStore, $firmDocumentSetImpl);
}

function meta::external::store::document::tests::object::TestFirmLocalMongoRuntime():meta::pure::runtime::Runtime[1]
{
  meta::external::store::document::tests::object::getLocalMongoRuntime(
    meta::external::store::document::tests::object::TestFirmMongoStore())
}

function meta::external::store::document::tests::object::TestPersonLocalMongoRuntime():meta::pure::runtime::Runtime[1]
{
  meta::external::store::document::tests::object::getLocalMongoRuntime(
    meta::external::store::document::tests::object::TestPersonMongoStore())
}


function meta::external::store::document::tests::object::getLocalMongoRuntime(dataStore:meta::external::store::document::metamodel::DocumentStore[1]):meta::pure::runtime::Runtime[1]
{
  ^meta::pure::runtime::Runtime(connections =
    meta::external::store::document::tests::object::localMongoDatabaseConnection($dataStore));
}


function meta::external::store::document::tests::object::localMongoDatabaseConnection(dataStore:meta::external::store::document::metamodel::DocumentStore[1]):meta::external::store::document::runtime::connections::DocumentStoreConnection[1]
{
    ^meta::external::store::document::runtime::connections::DocumentStoreConnection(
        element = $dataStore,
        type = meta::external::store::document::metamodel::runtime::DatabaseType.Mongo,
        datasourceSpecification = ^meta::external::store::document::runtime::connections::MongoDBDatasourceSpecification(host='localhost',port=27017,databaseName='myCollection'),
        authenticationStrategy = ^meta::external::store::document::runtime::authentication::TestDatabaseAuthenticationStrategy(),
        timeZone = 'GMT'
    );
}

Class meta::external::store::document::tests::object::TestSetup 
{
   mapping: meta::pure::mapping::Mapping[1];
   runtime: meta::pure::runtime::Runtime[1];
}


function meta::external::store::document::tests::object::getFirmTestSetup(): meta::external::store::document::tests::object::TestSetup[1]
{
  let mongoStoreAndMapping = meta::external::store::document::tests::object::getFirmDocumentStoreAndMapping();
  let mapping = ^meta::pure::mapping::Mapping(classMappings=$mongoStoreAndMapping.second, name='nameOfMapping');
  let runtime = meta::external::store::document::tests::object::getLocalMongoRuntime($mongoStoreAndMapping.first);
  ^meta::external::store::document::tests::object::TestSetup(mapping = $mapping, runtime = $runtime);
}

function meta::external::store::document::tests::object::getPersonTestSetup(): meta::external::store::document::tests::object::TestSetup[1]
{
  let mongoStoreAndMapping = meta::external::store::document::tests::object::getPersonDocumentStoreAndMapping();
  let mapping = ^meta::pure::mapping::Mapping(classMappings=$mongoStoreAndMapping.second, name='nameOfMapping');
  let runtime = meta::external::store::document::tests::object::getLocalMongoRuntime($mongoStoreAndMapping.first);
  ^meta::external::store::document::tests::object::TestSetup(mapping = $mapping, runtime = $runtime);
}


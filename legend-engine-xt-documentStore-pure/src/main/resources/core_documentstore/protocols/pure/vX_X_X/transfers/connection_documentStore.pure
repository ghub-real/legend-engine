// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::json::*;
import meta::protocols::pure::vX_X_X::metamodel::store::document::connection::*;
import meta::protocols::pure::vX_X_X::metamodel::domain::*;
import meta::protocols::pure::vX_X_X::metamodel::store::document::mapping::*;
import meta::protocols::pure::vX_X_X::metamodel::runtime::*;
import meta::pure::functions::meta::*;
//import meta::protocols::pure::vX_X_X::transformation::fromPureGraph::store::document::*;
import meta::protocols::pure::vX_X_X::transformation::fromPureGraph::connection::store::document::*;
//import meta::protocols::pure::vX_X_X::transformation::fromPureGraph::connection::*;
//import meta::protocols::pure::vX_X_X::metamodel::store::relational::connection::*;
//import meta::protocols::pure::vX_X_X::metamodel::store::relational::element::*;
//import meta::protocols::pure::vX_X_X::transformation::fromPureGraph::model::*;

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::connection::store::document::transformDatabaseConnection(otherConnection:meta::external::store::document::metamodel::runtime::DatabaseConnection[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::store::document::connection::DatabaseConnection[1]
{
   let _type = $otherConnection->class()->toString();
   let element = $otherConnection.element->match([d:meta::pure::store::Store[1]|$d->elementToPath(),s:String[1]|$s]);
   let type = $otherConnection.type->toString();
  //  let postProcessorsWithParams = if ($otherConnection->instanceOf(meta::pure::alloy::connections::RelationalDatabaseConnection),
  //                                     | [],
  //                                     | $otherConnection.queryPostProcessorsWithParameter->transformPostProcessors($extensions));


   let alloyConnection = $otherConnection->match($extensions.serializerExtension('vX_X_X')->cast(@meta::protocols::pure::vX_X_X::extension::SerializerExtension_vX_X_X).moduleSerializerExtension('documentStore')->cast(@meta::protocols::pure::vX_X_X::extension::store::document::NonRelationalModuleSerializerExtension).transfers_connection_transformDatabaseConnection->map(f |
   $f->eval($_type, $element, $type);
   )->concatenate([
     test:meta::protocols::pure::vX_X_X::metamodel::store::document::connection::TestDatabaseConnection[1]|
         ^DocumentStoreConnection(
           _type = 'DocumentStoreConnection',
           type = $type,
           timeZone = $test.timeZone,
           quoteIdentifiers = $test.quoteIdentifiers,
           element = $element,
           //datasourceSpecification = ^meta::external::store::document::runtime::connections::MongoDBDatasourceSpecification(host='localhost',port=27017,databaseName='myCollection'),
          datasourceSpecification = ^meta::protocols::pure::vX_X_X::metamodel::store::document::connection::legend::specification::MongoDBDatasourceSpecification(_type='mongoDB', host='localhost',port=27017,databaseName='myCollection'),
           
           authenticationStrategy = ^meta::protocols::pure::vX_X_X::metamodel::store::document::connection::alloy::authentication::TestDatabaseAuthenticationStrategy(
             _type = 'test'
           )
          //  ,
          //  postProcessorWithParameter = $postProcessorsWithParams
        );
        ,
      documentStore:meta::external::store::document::runtime::connections::DocumentStoreConnection[1] |

         //let processors = transformPostProcessors($documentStore.postProcessors, $extensions);
         let processors = [];
         documentStore($type, $element, $documentStore.timeZone, $documentStore.quoteIdentifiers, $processors, $documentStore.datasourceSpecification, $documentStore.authenticationStrategy, $extensions);,
      dbCon:meta::external::store::document::metamodel::runtime::DatabaseConnection[1]|

         ^meta::protocols::pure::vX_X_X::metamodel::store::document::connection::DatabaseConnection(
                  _type = $_type,
                  timeZone = $dbCon.timeZone,
                  quoteIdentifiers = $dbCon.quoteIdentifiers,
                  element = $element,
                  //postProcessorWithParameter = $postProcessorsWithParams,
                  type = $type);
    ])->toOneMany());

    $alloyConnection;
}

//function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::connection::transformPostProcessors(processors:meta::pure::alloy::connections::PostProcessor[*], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::store::relational::postProcessor::PostProcessor[*]
//{
//   $processors->map(processor |
//      $processor->match([
//         m:meta::pure::alloy::connections::MapperPostProcessor[1] | ^meta::protocols::pure::vX_X_X::metamodel::store::relational::postProcessor::MapperPostProcessor(
//            _type = 'mapper',
//            mappers = transformPostProcessorMappers($m.mappers))
//      ]->concatenate($extensions.serializerExtension('vX_X_X')->cast(@meta::protocols::pure::vX_X_X::extension::SerializerExtension_vX_X_X).moduleSerializerExtension('relational')->cast(@meta::protocols::pure::vX_X_X::extension::RelationalModuleSerializerExtension).transfers_connection_transformPostProcessors)->toOneMany())
//   );
//}

//function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::connection::transformPostProcessorMappers(mappers:meta::pure::alloy::connections::Mapper[*]):meta::protocols::pure::vX_X_X::metamodel::store::relational::postProcessor::Mapper[*]
//{
//   $mappers->map(mapper |
//                   $mapper->match([
//                      t:meta::pure::alloy::connections::TableNameMapper[1] | ^meta::protocols::pure::vX_X_X::metamodel::store::relational::postProcessor::TableNameMapper(
//                         _type = 'table',
//                         schema = ^meta::protocols::pure::vX_X_X::metamodel::store::relational::postProcessor::SchemaNameMapper(
//                            _type = 'schema',
//                            from = $t.schema.from,
//                            to = $t.schema.to
//                         ),
//                         from = $t.from,
//                         to = $t.to
//                      ),
//                      s:meta::pure::alloy::connections::SchemaNameMapper[1] | ^meta::protocols::pure::vX_X_X::metamodel::store::relational::postProcessor::SchemaNameMapper(
//                         _type = 'schema',
//                         from = $s.from,
//                         to = $s.to
//                      )
//                   ])
//                )
//}

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::connection::store::document::documentStore(type:String[1], element:String[1], timeZone:String[0..1], quoteIdentifiers:Boolean[0..1],
                                                                                             processors:meta::protocols::pure::vX_X_X::metamodel::store::document::postProcessor::PostProcessor[*],
                                                                                             spec:meta::external::store::document::runtime::connections::specification::DatasourceSpecification[1],
                                                                                             auth:meta::external::store::document::runtime::authentication::AuthenticationStrategy[1],
                                                                                             extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::store::document::connection::DocumentStoreConnection[1]
{
  // Post processor is already converted.
  ^meta::protocols::pure::vX_X_X::metamodel::store::document::connection::DocumentStoreConnection(
     _type = 'DocumentStoreConnection',
     timeZone = $timeZone,
     quoteIdentifiers = $quoteIdentifiers,
     element = $element,
     type = $type,
     datasourceSpecification = $spec->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::connection::store::document::transformDatasourceSpecification($extensions),
     authenticationStrategy = $auth->meta::protocols::pure::vX_X_X::transformation::fromPureGraph::connection::store::document::transformAuthenticationStrategy($extensions),
     postProcessors = $processors
  );
}


function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::connection::store::document::transformAuthenticationStrategy(a:meta::external::store::document::runtime::authentication::AuthenticationStrategy[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::store::document::connection::alloy::authentication::AuthenticationStrategy[1]
{
   $a->match($extensions.serializerExtension('vX_X_X')->cast(@meta::protocols::pure::vX_X_X::extension::SerializerExtension_vX_X_X).moduleSerializerExtension('documentStore')->cast(@meta::protocols::pure::vX_X_X::extension::store::document::NonRelationalModuleSerializerExtension).transfers_connection_transformAuthenticationStrategy->concatenate([
      u:meta::external::store::document::runtime::authentication::UserNamePasswordAuthenticationStrategy[1] |
      ^meta::protocols::pure::vX_X_X::metamodel::store::document::connection::alloy::authentication::UserNamePasswordAuthenticationStrategy(
         _type = 'userNamePassword',
         baseVaultReference = $u.baseVaultReference,
         userNameVaultReference = $u.userNameVaultReference,
         passwordVaultReference = $u.passwordVaultReference
      ),
      t:meta::external::store::document::runtime::authentication::TestDatabaseAuthenticationStrategy[1] |
         ^meta::protocols::pure::vX_X_X::metamodel::store::document::connection::alloy::authentication::TestDatabaseAuthenticationStrategy(
            _type = 'test'
         )
   ])->toOneMany())
}

function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::connection::store::document::transformDatasourceSpecification(ds: meta::external::store::document::runtime::connections::specification::DatasourceSpecification[1], extensions:meta::pure::extension::Extension[*]):meta::protocols::pure::vX_X_X::metamodel::store::document::connection::alloy::specification::DatasourceSpecification[1]
{
   $ds->match($extensions.serializerExtension('vX_X_X')->cast(@meta::protocols::pure::vX_X_X::extension::SerializerExtension_vX_X_X).moduleSerializerExtension('documentStore')->cast(@meta::protocols::pure::vX_X_X::extension::store::document::NonRelationalModuleSerializerExtension).transfers_connection_transformDatasourceSpecification->concatenate([
      m:meta::external::store::document::runtime::connections::MongoDBDatasourceSpecification[1] |
         ^meta::protocols::pure::vX_X_X::metamodel::store::document::connection::legend::specification::MongoDBDatasourceSpecification(
            _type = 'mongoDB',
            host = $m.host,
            port = $m.port,
            databaseName = $m.databaseName,
            clusterID = $m.clusterID
         ),
      t:meta::external::store::document::runtime::connections::TestDatasourceSpecification[1] |
         ^meta::protocols::pure::vX_X_X::metamodel::store::document::connection::legend::specification::TestDatasourceSpecification(
            _type = 'test',
            host = $t.host,
            port = $t.port,
            databaseName = $t.databaseName
         )
   ])->toOneMany())
}

//function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::connection::transformPostProcessors(postP: meta::relational::runtime::PostProcessorWithParameter[*], extensions:meta::pure::extension::Extension[*]): meta::protocols::pure::vX_X_X::metamodel::store::relational::PostProcessorWithParameter[*]
//{
//   $postP->map(postprocessor|
//            ^meta::protocols::pure::vX_X_X::metamodel::store::relational::PostProcessorWithParameter(pp = $postprocessor.postProcessor->elementToPath(), parameters = $postprocessor.parameters->transformPostProcessorParameters($extensions))
//               );
//}
//
//
//function meta::protocols::pure::vX_X_X::transformation::fromPureGraph::connection::transformPostProcessorParameters(params: meta::relational::runtime::PostProcessorParameter[*], extensions:meta::pure::extension::Extension[*]): meta::protocols::pure::vX_X_X::metamodel::store::relational::PostProcessorParameter[*]
//{
//   $params->map(param|
//            $param->match([
//               t: meta::relational::postProcessor::TableNameMapper[1]| ^meta::protocols::pure::vX_X_X::metamodel::store::relational::TableNameMapper(_type='tableMapper',in =$t.in, out = $t.out, schemaMapperIn = $t.schemaNameMapper.in, schemaMapperOut = $t.schemaNameMapper.out),
//               s: meta::relational::postProcessor::SchemaNameMapper[1]| ^meta::protocols::pure::vX_X_X::metamodel::store::relational::SchemaNameMapper(_type='schemaMapper',in =$s.in, out = $s.out )
//            ]->concatenate($extensions.serializerExtension('vX_X_X')->cast(@meta::protocols::pure::vX_X_X::extension::SerializerExtension_vX_X_X).moduleSerializerExtension('relational')->cast(@meta::protocols::pure::vX_X_X::extension::RelationalModuleSerializerExtension).transfers_connection_transformPostProcessorParameters)->toOneMany()));
//}
